image: docker:19.03.13

services:
  - docker:19.03.13-dind

variables:
  #  DOCKER_DRIVER: overlay2
  #  DOCKER_HOST: docker:2375
  DOCKER_TLS_CERTDIR: ""
  YARN_CACHE_PATH: "$CI_PROJECT_DIR/.yarn_cache"

stages:
  # - test
  - build
  - deploy
  - code-quality

# cache:
#   paths:
#     - .yarn_cache/
#     - node_modules/

# test-dev:
#   image: node:14.16.0-alpine3.12
#   stage: test-dev
#   when: always
#   only:
#     - develop
#   tags:
#     - docker
#   before_script:
#     - npm install
#   script:
#     - CI=true npm run test

build-dev:
  stage: build
  when: on_success
  only:
    - develop
  tags:
    - docker
    - oci
    - develop
  before_script:
    - apk add --no-cache git
    - export DOCKER_IMAGE=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}
    - export DOCKER_IMAGE_SHA=$DOCKER_IMAGE:${CI_COMMIT_SHA:0:12}
    - export DOCKER_IMAGE_SLUG=$DOCKER_IMAGE:$CI_COMMIT_REF_SLUG
    - echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} --password-stdin
  script:
    - echo ${DOCKER_IMAGE_SHA}
    - echo ${DOCKER_IMAGE_SLUG}
    - docker build -t $DOCKER_IMAGE_SHA --network=host -f ./Dockerfile.dev .

    - docker push $DOCKER_IMAGE_SHA
    - |
      if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then
        export DOCKER_IMAGE_SLUG=$DOCKER_IMAGE:latest
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_SLUG
        docker push $DOCKER_IMAGE_SLUG
      fi
      if [ "$CI_COMMIT_TAG" != "" ]; then
        export DOCKER_IMAGE_TAG="${DOCKER_IMAGE}:${CI_COMMIT_TAG}"
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_TAG
        docker push $DOCKER_IMAGE_TAG
      fi

deploy-dev:
  image: registry.gitlab.com/ussik-gitlab/baseimage:latest
  stage: deploy
  when: on_success
  only:
    - develop
  tags:
    - docker
    - oci
    - develop
  before_script:
    - export DOCKER_IMAGE=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}
    - export DOCKER_IMAGE_SHA=$DOCKER_IMAGE:${CI_COMMIT_SHA:0:12}
  script:
    - docker-compose --version
    - docker-compose -f ./docker-compose-deploy.yml up -d

build-prod:
  stage: build
  when: on_success
  only:
    - master
    - master-preprod
  tags:
    - docker
    - oci
    - production
  before_script:
    - apk add --no-cache git
    - export DOCKER_IMAGE=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}
    - export DOCKER_IMAGE_SHA=$DOCKER_IMAGE:${CI_COMMIT_SHA:0:12}
    - export DOCKER_IMAGE_SLUG=$DOCKER_IMAGE:$CI_COMMIT_REF_SLUG
    - echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} --password-stdin
  script:
    - echo ${DOCKER_IMAGE_SHA}
    - echo ${DOCKER_IMAGE_SLUG}
    - docker build -t $DOCKER_IMAGE_SHA --network=host -f ./Dockerfile.prod .
    - docker push $DOCKER_IMAGE_SHA
    - |
      if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then
        export DOCKER_IMAGE_SLUG=$DOCKER_IMAGE:latest
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_SLUG
        docker push $DOCKER_IMAGE_SLUG
      fi
      if [ "$CI_COMMIT_TAG" != "" ]; then
        export DOCKER_IMAGE_TAG="${DOCKER_IMAGE}:${CI_COMMIT_TAG}"
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_TAG
        docker push $DOCKER_IMAGE_TAG
      fi

deploy-prod:
  image: registry.gitlab.com/ussik-gitlab/baseimage:latest
  stage: deploy
  when: on_success
  only:
    - master
    - master-preprod
  tags:
    - docker
    - oci
    - production
  before_script:
    - export DOCKER_IMAGE=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}
    - export DOCKER_IMAGE_SHA=$DOCKER_IMAGE:${CI_COMMIT_SHA:0:12}
  script:
    - docker-compose --version
    - docker-compose -f ./docker-compose-deploy.yml up -d


build-alpha:
  stage: build
  when: on_success
  only:
    - alpha
  tags:
    - docker
    - oci
    - alpha
  before_script:
    - apk add --no-cache git
    - export DOCKER_IMAGE=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}_alpha
    - export DOCKER_IMAGE_SHA=$DOCKER_IMAGE:${CI_COMMIT_SHA:0:12}
    - export DOCKER_IMAGE_SLUG=$DOCKER_IMAGE:$CI_COMMIT_REF_SLUG
    - echo  ${DOCKER_IMAGE}
    - echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} --password-stdin
  script:
    - echo ${DOCKER_IMAGE_SHA}
    - echo ${DOCKER_IMAGE_SLUG}
    - docker build -t $DOCKER_IMAGE_SHA --network=host -f ./Dockerfile.alpha .
    - docker push $DOCKER_IMAGE_SHA
    - |
      if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then
        export DOCKER_IMAGE_SLUG=$DOCKER_IMAGE:latest
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_SLUG
        docker push $DOCKER_IMAGE_SLUG
      fi
      if [ "$CI_COMMIT_TAG" != "" ]; then
        export DOCKER_IMAGE_TAG="${DOCKER_IMAGE}:${CI_COMMIT_TAG}"
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_TAG
        docker push $DOCKER_IMAGE_TAG
      fi

deploy-alpha:
  image: registry.gitlab.com/ussik-gitlab/baseimage:latest
  stage: deploy
  when: on_success
  only:
    - alpha
  tags:
    - docker
    - oci
    - alpha
  before_script:
    - export DOCKER_IMAGE=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}_alpha
    - export DOCKER_IMAGE_SHA=$DOCKER_IMAGE:${CI_COMMIT_SHA:0:12}
  script:
    - docker-compose --version
    - docker-compose -f ./docker-compose-deploy-alpha.yml up -d

build_test:
  stage: code-quality
  image: node:22-alpine
  tags:
    - oci
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: never
    - if: $CI_COMMIT_BRANCH == "master-preprod"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      when: never
    - if: $CI_COMMIT_BRANCH == "alpha"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never

    - when: always
  before_script:
    - node -v
    - ulimit -u 1024
    - yarn -v
    - yarn install
  script:
    - npm run build:brotli

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  GetApiReportsAllInvoicesPdfOnPeriodParams,
  GetApiReportsAllOsiDebtFileCurrentMonthParams,
  GetApiReportsAllOsiDebtFileOnPeriodParams,
  GetApiReportsDbfForKazpostParams,
  GetApiReportsDebtFileCurrentMonthOsiIdParams,
  GetApiReportsDebtFileOnPeriodOsiIdParams,
  GetApiReportsFileForCheckActsParams,
  GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams,
  PostApiReportsAbonentsInvoicesPdfOnPeriodParams
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */
export const getApiReportsDebtFileCurrentMonthOsiId = (
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/debt-file-current-month/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsDebtFileCurrentMonthOsiIdQueryKey = (
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams
) => {
  return [`/api/Reports/debt-file-current-month/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsDebtFileCurrentMonthOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsDebtFileCurrentMonthOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>> = ({ signal }) =>
    getApiReportsDebtFileCurrentMonthOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsDebtFileCurrentMonthOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>
>;
export type GetApiReportsDebtFileCurrentMonthOsiIdQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsDebtFileCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsDebtFileCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsDebtFileCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */

export function useGetApiReportsDebtFileCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileCurrentMonthOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileCurrentMonthOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsDebtFileCurrentMonthOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiReportsDebtFileOnPeriodOsiId = (
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/debt-file-on-period/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsDebtFileOnPeriodOsiIdQueryKey = (
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams
) => {
  return [`/api/Reports/debt-file-on-period/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsDebtFileOnPeriodOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsDebtFileOnPeriodOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>> = ({ signal }) =>
    getApiReportsDebtFileOnPeriodOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsDebtFileOnPeriodOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>
>;
export type GetApiReportsDebtFileOnPeriodOsiIdQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsDebtFileOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsDebtFileOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsDebtFileOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiReportsDebtFileOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsDebtFileOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDebtFileOnPeriodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsDebtFileOnPeriodOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ –≤—Å–µ–º –û–°–ò
 */
export const getApiReportsAllOsiDebtFileOnPeriod = (
  params: GetApiReportsAllOsiDebtFileOnPeriodParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/all-osi-debt-file-on-period`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsAllOsiDebtFileOnPeriodQueryKey = (params: GetApiReportsAllOsiDebtFileOnPeriodParams) => {
  return [`/api/Reports/all-osi-debt-file-on-period`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsAllOsiDebtFileOnPeriodQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsAllOsiDebtFileOnPeriodQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>> = ({ signal }) =>
    getApiReportsAllOsiDebtFileOnPeriod(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsAllOsiDebtFileOnPeriodQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>
>;
export type GetApiReportsAllOsiDebtFileOnPeriodQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsAllOsiDebtFileOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileOnPeriodParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAllOsiDebtFileOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAllOsiDebtFileOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ –≤—Å–µ–º –û–°–ò
 */

export function useGetApiReportsAllOsiDebtFileOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileOnPeriod>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsAllOsiDebtFileOnPeriodQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ –≤—Å–µ–º –û–°–ò
 */
export const getApiReportsAllOsiDebtFileCurrentMonth = (
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/all-osi-debt-file-current-month`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsAllOsiDebtFileCurrentMonthQueryKey = (
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams
) => {
  return [`/api/Reports/all-osi-debt-file-current-month`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsAllOsiDebtFileCurrentMonthQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsAllOsiDebtFileCurrentMonthQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>> = ({ signal }) =>
    getApiReportsAllOsiDebtFileCurrentMonth(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsAllOsiDebtFileCurrentMonthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>
>;
export type GetApiReportsAllOsiDebtFileCurrentMonthQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsAllOsiDebtFileCurrentMonth<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAllOsiDebtFileCurrentMonth<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAllOsiDebtFileCurrentMonth<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –§–∞–π–ª —Å –¥–æ–ª–≥–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ –≤—Å–µ–º –û–°–ò
 */

export function useGetApiReportsAllOsiDebtFileCurrentMonth<
  TData = Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllOsiDebtFileCurrentMonthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllOsiDebtFileCurrentMonth>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsAllOsiDebtFileCurrentMonthQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–æ–≤
 */
export const getApiReportsFileForCheckActs = (
  params: GetApiReportsFileForCheckActsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/file-for-check-acts`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsFileForCheckActsQueryKey = (params: GetApiReportsFileForCheckActsParams) => {
  return [`/api/Reports/file-for-check-acts`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsFileForCheckActsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsFileForCheckActsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsFileForCheckActsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>> = ({ signal }) =>
    getApiReportsFileForCheckActs(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsFileForCheckActsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>
>;
export type GetApiReportsFileForCheckActsQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsFileForCheckActs<
  TData = Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsFileForCheckActsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsFileForCheckActs<
  TData = Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsFileForCheckActsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsFileForCheckActs<
  TData = Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsFileForCheckActsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–æ–≤
 */

export function useGetApiReportsFileForCheckActs<
  TData = Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsFileForCheckActsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsFileForCheckActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsFileForCheckActsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–≤–µ–¥–µ–Ω–∏—è –æ–± –û–°–ò
 */
export const getApiReportsOsiInformation = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>({ url: `/api/Reports/osi-information`, method: 'GET', signal }, options);
};

export const getGetApiReportsOsiInformationQueryKey = () => {
  return [`/api/Reports/osi-information`] as const;
};

export const getGetApiReportsOsiInformationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsOsiInformation>>,
  TError = ErrorType<ApiResponse>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsOsiInformationQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsOsiInformation>>> = ({ signal }) =>
    getApiReportsOsiInformation(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsOsiInformation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsOsiInformationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsOsiInformation>>
>;
export type GetApiReportsOsiInformationQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsOsiInformation<
  TData = Awaited<ReturnType<typeof getApiReportsOsiInformation>>,
  TError = ErrorType<ApiResponse>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsOsiInformation<
  TData = Awaited<ReturnType<typeof getApiReportsOsiInformation>>,
  TError = ErrorType<ApiResponse>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsOsiInformation<
  TData = Awaited<ReturnType<typeof getApiReportsOsiInformation>>,
  TError = ErrorType<ApiResponse>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–≤–µ–¥–µ–Ω–∏—è –æ–± –û–°–ò
 */

export function useGetApiReportsOsiInformation<
  TData = Awaited<ReturnType<typeof getApiReportsOsiInformation>>,
  TError = ErrorType<ApiResponse>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsOsiInformation>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsOsiInformationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –û–°–ò –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */
export const getApiReportsInvoicesPdfOnCurrentDateOsiId = (
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/invoices-pdf-on-current-date/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsInvoicesPdfOnCurrentDateOsiIdQueryKey = (
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams
) => {
  return [`/api/Reports/invoices-pdf-on-current-date/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsInvoicesPdfOnCurrentDateOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsInvoicesPdfOnCurrentDateOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>> = ({ signal }) =>
    getApiReportsInvoicesPdfOnCurrentDateOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsInvoicesPdfOnCurrentDateOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>
>;
export type GetApiReportsInvoicesPdfOnCurrentDateOsiIdQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsInvoicesPdfOnCurrentDateOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsInvoicesPdfOnCurrentDateOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsInvoicesPdfOnCurrentDateOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –û–°–ò –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */

export function useGetApiReportsInvoicesPdfOnCurrentDateOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnCurrentDateOsiIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnCurrentDateOsiId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsInvoicesPdfOnCurrentDateOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –û–°–ò –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */
export const getApiReportsInvoicesPdfOnPeriodOsiId = (
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/invoices-pdf-on-period/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsInvoicesPdfOnPeriodOsiIdQueryKey = (
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams
) => {
  return [`/api/Reports/invoices-pdf-on-period/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsInvoicesPdfOnPeriodOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsInvoicesPdfOnPeriodOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>> = ({ signal }) =>
    getApiReportsInvoicesPdfOnPeriodOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsInvoicesPdfOnPeriodOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>
>;
export type GetApiReportsInvoicesPdfOnPeriodOsiIdQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsInvoicesPdfOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsInvoicesPdfOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsInvoicesPdfOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –û–°–ò –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */

export function useGetApiReportsInvoicesPdfOnPeriodOsiId<
  TData = Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>,
  TError = ErrorType<ApiResponse>
>(
  osiId: number,
  params: GetApiReportsInvoicesPdfOnPeriodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsInvoicesPdfOnPeriodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsInvoicesPdfOnPeriodOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –≤—Å–µ–º –û–°–ò –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */
export const getApiReportsAllInvoicesPdfOnPeriod = (
  params: GetApiReportsAllInvoicesPdfOnPeriodParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/all-invoices-pdf-on-period`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsAllInvoicesPdfOnPeriodQueryKey = (params: GetApiReportsAllInvoicesPdfOnPeriodParams) => {
  return [`/api/Reports/all-invoices-pdf-on-period`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsAllInvoicesPdfOnPeriodQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllInvoicesPdfOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsAllInvoicesPdfOnPeriodQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>> = ({ signal }) =>
    getApiReportsAllInvoicesPdfOnPeriod(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsAllInvoicesPdfOnPeriodQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>
>;
export type GetApiReportsAllInvoicesPdfOnPeriodQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsAllInvoicesPdfOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllInvoicesPdfOnPeriodParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAllInvoicesPdfOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllInvoicesPdfOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAllInvoicesPdfOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllInvoicesPdfOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –≤—Å–µ–º –û–°–ò –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */

export function useGetApiReportsAllInvoicesPdfOnPeriod<
  TData = Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsAllInvoicesPdfOnPeriodParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAllInvoicesPdfOnPeriod>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsAllInvoicesPdfOnPeriodQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */
export const getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId = (
  abonentId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/abonents-invoice-pdf-on-current-date/${abonentId}`, method: 'GET', signal },
    options
  );
};

export const getGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentIdQueryKey = (abonentId: number) => {
  return [`/api/Reports/abonents-invoice-pdf-on-current-date/${abonentId}`] as const;
};

export const getGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentIdQueryKey(abonentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>> = ({
    signal
  }) => getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId(abonentId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>
>;
export type GetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentIdQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */

export function useGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnCurrentDateAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsAbonentsInvoicePdfOnCurrentDateAbonentIdQueryOptions(abonentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */
export const getApiReportsAbonentsInvoicePdfOnPeriodAbonentId = (
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/abonents-invoice-pdf-on-period/${abonentId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdQueryKey = (
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams
) => {
  return [`/api/Reports/abonents-invoice-pdf-on-period/${abonentId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdQueryKey(abonentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>> = ({
    signal
  }) => getApiReportsAbonentsInvoicePdfOnPeriodAbonentId(abonentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>
>;
export type GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsAbonentsInvoicePdfOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAbonentsInvoicePdfOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsAbonentsInvoicePdfOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */

export function useGetApiReportsAbonentsInvoicePdfOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>,
  TError = ErrorType<ApiResponse>
>(
  abonentId: number,
  params: GetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiReportsAbonentsInvoicePdfOnPeriodAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsAbonentsInvoicePdfOnPeriodAbonentIdQueryOptions(abonentId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */
export const postApiReportsAbonentsInvoicesPdfOnCurrentDate = (
  postApiReportsAbonentsInvoicesPdfOnCurrentDateBody: BodyType<number[]>,
  params: PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    {
      url: `/api/Reports/abonents-invoices-pdf-on-current-date`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postApiReportsAbonentsInvoicesPdfOnCurrentDateBody,
      params,
      signal
    },
    options
  );
};

export const getPostApiReportsAbonentsInvoicesPdfOnCurrentDateMutationOptions = <
  TError = ErrorType<ApiResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnCurrentDate>>,
    TError,
    { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnCurrentDate>>,
  TError,
  { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnCurrentDate>>,
    { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiReportsAbonentsInvoicesPdfOnCurrentDate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiReportsAbonentsInvoicesPdfOnCurrentDateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnCurrentDate>>
>;
export type PostApiReportsAbonentsInvoicesPdfOnCurrentDateMutationBody = BodyType<number[]>;
export type PostApiReportsAbonentsInvoicesPdfOnCurrentDateMutationError = ErrorType<ApiResponse>;

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
 */
export const usePostApiReportsAbonentsInvoicesPdfOnCurrentDate = <
  TError = ErrorType<ApiResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnCurrentDate>>,
    TError,
    { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnCurrentDate>>,
  TError,
  { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnCurrentDateParams },
  TContext
> => {
  const mutationOptions = getPostApiReportsAbonentsInvoicesPdfOnCurrentDateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */
export const postApiReportsAbonentsInvoicesPdfOnPeriod = (
  postApiReportsAbonentsInvoicesPdfOnPeriodBody: BodyType<number[]>,
  params: PostApiReportsAbonentsInvoicesPdfOnPeriodParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    {
      url: `/api/Reports/abonents-invoices-pdf-on-period`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postApiReportsAbonentsInvoicesPdfOnPeriodBody,
      params,
      signal
    },
    options
  );
};

export const getPostApiReportsAbonentsInvoicesPdfOnPeriodMutationOptions = <
  TError = ErrorType<ApiResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnPeriod>>,
    TError,
    { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnPeriodParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnPeriod>>,
  TError,
  { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnPeriodParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnPeriod>>,
    { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnPeriodParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiReportsAbonentsInvoicesPdfOnPeriod(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiReportsAbonentsInvoicesPdfOnPeriodMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnPeriod>>
>;
export type PostApiReportsAbonentsInvoicesPdfOnPeriodMutationBody = BodyType<number[]>;
export type PostApiReportsAbonentsInvoicesPdfOnPeriodMutationError = ErrorType<ApiResponse>;

/**
 * @summary –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª PDF —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü
 */
export const usePostApiReportsAbonentsInvoicesPdfOnPeriod = <
  TError = ErrorType<ApiResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnPeriod>>,
    TError,
    { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnPeriodParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiReportsAbonentsInvoicesPdfOnPeriod>>,
  TError,
  { data: BodyType<number[]>; params: PostApiReportsAbonentsInvoicesPdfOnPeriodParams },
  TContext
> => {
  const mutationOptions = getPostApiReportsAbonentsInvoicesPdfOnPeriodMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–æ–≤
 */
export const getApiReportsDbfForKazpost = (
  params: GetApiReportsDbfForKazpostParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>(
    { url: `/api/Reports/dbf-for-kazpost`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiReportsDbfForKazpostQueryKey = (params: GetApiReportsDbfForKazpostParams) => {
  return [`/api/Reports/dbf-for-kazpost`, ...(params ? [params] : [])] as const;
};

export const getGetApiReportsDbfForKazpostQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsDbfForKazpostParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiReportsDbfForKazpostQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>> = ({ signal }) =>
    getApiReportsDbfForKazpost(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiReportsDbfForKazpostQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>>;
export type GetApiReportsDbfForKazpostQueryError = ErrorType<ApiResponse>;

export function useGetApiReportsDbfForKazpost<
  TData = Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsDbfForKazpostParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsDbfForKazpost<
  TData = Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsDbfForKazpostParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiReportsDbfForKazpost<
  TData = Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsDbfForKazpostParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–æ–≤
 */

export function useGetApiReportsDbfForKazpost<
  TData = Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>,
  TError = ErrorType<ApiResponse>
>(
  params: GetApiReportsDbfForKazpostParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReportsDbfForKazpost>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiReportsDbfForKazpostQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

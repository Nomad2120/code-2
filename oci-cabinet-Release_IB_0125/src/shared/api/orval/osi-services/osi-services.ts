/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbOsiService,
  ApiResponse1SystemCollectionsGenericList1OSICoreModelsResponsesAbonentOnServiceResponse,
  PutApiOsiServicesIdSetStateParams,
  RequestsAbonentOnServiceRequest,
  RequestsOsiServiceRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –û–°–ò
 */
export const getApiOsiServicesId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiService>(
    { url: `/api/OsiServices/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiServicesIdQueryKey = (id: number) => {
  return [`/api/OsiServices/${id}`] as const;
};

export const getGetApiOsiServicesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiServicesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiServicesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiServicesId>>> = ({ signal }) =>
    getApiOsiServicesId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiServicesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiServicesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiServicesId>>>;
export type GetApiOsiServicesIdQueryError = ErrorType<unknown>;

export function useGetApiOsiServicesId<
  TData = Awaited<ReturnType<typeof getApiOsiServicesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiServicesId<
  TData = Awaited<ReturnType<typeof getApiOsiServicesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiServicesId<
  TData = Awaited<ReturnType<typeof getApiOsiServicesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –û–°–ò
 */

export function useGetApiOsiServicesId<
  TData = Awaited<ReturnType<typeof getApiOsiServicesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiServicesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É –û–°–ò
 */
export const putApiOsiServicesId = (
  id: number,
  requestsOsiServiceRequest: BodyType<RequestsOsiServiceRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/OsiServices/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsOsiServiceRequest
    },
    options
  );
};

export const getPutApiOsiServicesIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServicesId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiServiceRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiServicesId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiServiceRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiServicesId>>,
    { id: number; data: BodyType<RequestsOsiServiceRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOsiServicesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiServicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiServicesId>>>;
export type PutApiOsiServicesIdMutationBody = BodyType<RequestsOsiServiceRequest>;
export type PutApiOsiServicesIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É –û–°–ò
 */
export const usePutApiOsiServicesId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServicesId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiServiceRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiServicesId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiServiceRequest> },
  TContext
> => {
  const mutationOptions = getPutApiOsiServicesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –û–°–ò
 */
export const postApiOsiServices = (
  requestsOsiServiceRequest: BodyType<RequestsOsiServiceRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiService>(
    {
      url: `/api/OsiServices`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsOsiServiceRequest,
      signal
    },
    options
  );
};

export const getPostApiOsiServicesMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiServices>>,
    TError,
    { data: BodyType<RequestsOsiServiceRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOsiServices>>,
  TError,
  { data: BodyType<RequestsOsiServiceRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOsiServices>>,
    { data: BodyType<RequestsOsiServiceRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOsiServices(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOsiServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOsiServices>>>;
export type PostApiOsiServicesMutationBody = BodyType<RequestsOsiServiceRequest>;
export type PostApiOsiServicesMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –û–°–ò
 */
export const usePostApiOsiServices = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiServices>>,
    TError,
    { data: BodyType<RequestsOsiServiceRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOsiServices>>,
  TError,
  { data: BodyType<RequestsOsiServiceRequest> },
  TContext
> => {
  const mutationOptions = getPostApiOsiServicesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Å–ª—É–≥–µ
 */
export const getApiOsiServicesIdAbonents = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericList1OSICoreModelsResponsesAbonentOnServiceResponse>(
    { url: `/api/OsiServices/${id}/abonents`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiServicesIdAbonentsQueryKey = (id: number) => {
  return [`/api/OsiServices/${id}/abonents`] as const;
};

export const getGetApiOsiServicesIdAbonentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiServicesIdAbonentsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>> = ({ signal }) =>
    getApiOsiServicesIdAbonents(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiServicesIdAbonentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>
>;
export type GetApiOsiServicesIdAbonentsQueryError = ErrorType<unknown>;

export function useGetApiOsiServicesIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiServicesIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiServicesIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Å–ª—É–≥–µ
 */

export function useGetApiOsiServicesIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServicesIdAbonents>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiServicesIdAbonentsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏/–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Å–ª—É–≥–µ
 */
export const putApiOsiServicesIdAbonents = (
  id: number,
  requestsAbonentOnServiceRequest: BodyType<RequestsAbonentOnServiceRequest[]>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/OsiServices/${id}/abonents`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAbonentOnServiceRequest
    },
    options
  );
};

export const getPutApiOsiServicesIdAbonentsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServicesIdAbonents>>,
    TError,
    { id: number; data: BodyType<RequestsAbonentOnServiceRequest[]> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiServicesIdAbonents>>,
  TError,
  { id: number; data: BodyType<RequestsAbonentOnServiceRequest[]> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiServicesIdAbonents>>,
    { id: number; data: BodyType<RequestsAbonentOnServiceRequest[]> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOsiServicesIdAbonents(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiServicesIdAbonentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOsiServicesIdAbonents>>
>;
export type PutApiOsiServicesIdAbonentsMutationBody = BodyType<RequestsAbonentOnServiceRequest[]>;
export type PutApiOsiServicesIdAbonentsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏/–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Å–ª—É–≥–µ
 */
export const usePutApiOsiServicesIdAbonents = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServicesIdAbonents>>,
    TError,
    { id: number; data: BodyType<RequestsAbonentOnServiceRequest[]> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiServicesIdAbonents>>,
  TError,
  { id: number; data: BodyType<RequestsAbonentOnServiceRequest[]> },
  TContext
> => {
  const mutationOptions = getPutApiOsiServicesIdAbonentsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º
 */
export const putApiOsiServicesIdSetState = (
  id: number,
  params?: PutApiOsiServicesIdSetStateParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/OsiServices/${id}/set-state`, method: 'PUT', params },
    options
  );
};

export const getPutApiOsiServicesIdSetStateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServicesIdSetState>>,
    TError,
    { id: number; params?: PutApiOsiServicesIdSetStateParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiServicesIdSetState>>,
  TError,
  { id: number; params?: PutApiOsiServicesIdSetStateParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiServicesIdSetState>>,
    { id: number; params?: PutApiOsiServicesIdSetStateParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiOsiServicesIdSetState(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiServicesIdSetStateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOsiServicesIdSetState>>
>;

export type PutApiOsiServicesIdSetStateMutationError = ErrorType<unknown>;

/**
 * @summary –û—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º
 */
export const usePutApiOsiServicesIdSetState = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServicesIdSetState>>,
    TError,
    { id: number; params?: PutApiOsiServicesIdSetStateParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiServicesIdSetState>>,
  TError,
  { id: number; params?: PutApiOsiServicesIdSetStateParams },
  TContext
> => {
  const mutationOptions = getPutApiOsiServicesIdSetStateMutationOptions(options);

  return useMutation(mutationOptions);
};

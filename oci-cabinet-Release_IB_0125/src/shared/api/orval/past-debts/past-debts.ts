/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsResponsesDebtorNotificationResponse,
  ApiResponse1OSICoreModelsResponsesNotaryApplicationResponse,
  ApiResponse1OSICoreModelsResponsesPastDebtsResponse,
  GetApiPastDebtsDebtorNotificationParams,
  GetApiPastDebtsNotaryApplicationParams,
  GetApiPastDebtsParams,
  PostApiPastDebtsParams,
  ResponsesPastDebtInfo
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 */
export const getApiPastDebts = (
  params: GetApiPastDebtsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesPastDebtsResponse>(
    { url: `/api/PastDebts`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiPastDebtsQueryKey = (params: GetApiPastDebtsParams) => {
  return [`/api/PastDebts`, ...(params ? [params] : [])] as const;
};

export const getGetApiPastDebtsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPastDebts>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPastDebtsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPastDebts>>> = ({ signal }) =>
    getApiPastDebts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPastDebts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPastDebtsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPastDebts>>>;
export type GetApiPastDebtsQueryError = ErrorType<unknown>;

export function useGetApiPastDebts<TData = Awaited<ReturnType<typeof getApiPastDebts>>, TError = ErrorType<unknown>>(
  params: GetApiPastDebtsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPastDebts<TData = Awaited<ReturnType<typeof getApiPastDebts>>, TError = ErrorType<unknown>>(
  params: GetApiPastDebtsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPastDebts<TData = Awaited<ReturnType<typeof getApiPastDebts>>, TError = ErrorType<unknown>>(
  params: GetApiPastDebtsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 */

export function useGetApiPastDebts<TData = Awaited<ReturnType<typeof getApiPastDebts>>, TError = ErrorType<unknown>>(
  params: GetApiPastDebtsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPastDebtsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 */
export const postApiPastDebts = (
  responsesPastDebtInfo: BodyType<ResponsesPastDebtInfo[]>,
  params: PostApiPastDebtsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/PastDebts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: responsesPastDebtInfo,
      params,
      signal
    },
    options
  );
};

export const getPostApiPastDebtsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPastDebts>>,
    TError,
    { data: BodyType<ResponsesPastDebtInfo[]>; params: PostApiPastDebtsParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPastDebts>>,
  TError,
  { data: BodyType<ResponsesPastDebtInfo[]>; params: PostApiPastDebtsParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPastDebts>>,
    { data: BodyType<ResponsesPastDebtInfo[]>; params: PostApiPastDebtsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiPastDebts(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPastDebtsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPastDebts>>>;
export type PostApiPastDebtsMutationBody = BodyType<ResponsesPastDebtInfo[]>;
export type PostApiPastDebtsMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 */
export const usePostApiPastDebts = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPastDebts>>,
    TError,
    { data: BodyType<ResponsesPastDebtInfo[]>; params: PostApiPastDebtsParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPastDebts>>,
  TError,
  { data: BodyType<ResponsesPastDebtInfo[]>; params: PostApiPastDebtsParams },
  TContext
> => {
  const mutationOptions = getPostApiPastDebtsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É"
 */
export const getApiPastDebtsDebtorNotification = (
  params: GetApiPastDebtsDebtorNotificationParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesDebtorNotificationResponse>(
    { url: `/api/PastDebts/debtor-notification`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiPastDebtsDebtorNotificationQueryKey = (params: GetApiPastDebtsDebtorNotificationParams) => {
  return [`/api/PastDebts/debtor-notification`, ...(params ? [params] : [])] as const;
};

export const getGetApiPastDebtsDebtorNotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsDebtorNotificationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPastDebtsDebtorNotificationQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>> = ({ signal }) =>
    getApiPastDebtsDebtorNotification(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPastDebtsDebtorNotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>
>;
export type GetApiPastDebtsDebtorNotificationQueryError = ErrorType<unknown>;

export function useGetApiPastDebtsDebtorNotification<
  TData = Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsDebtorNotificationParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPastDebtsDebtorNotification<
  TData = Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsDebtorNotificationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPastDebtsDebtorNotification<
  TData = Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsDebtorNotificationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É"
 */

export function useGetApiPastDebtsDebtorNotification<
  TData = Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsDebtorNotificationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsDebtorNotification>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPastDebtsDebtorNotificationQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è –û–°–ò –Ω–æ—Ç–∞—Ä–∏—É—Å—É
 */
export const getApiPastDebtsNotaryApplication = (
  params: GetApiPastDebtsNotaryApplicationParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesNotaryApplicationResponse>(
    { url: `/api/PastDebts/notary-application`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiPastDebtsNotaryApplicationQueryKey = (params: GetApiPastDebtsNotaryApplicationParams) => {
  return [`/api/PastDebts/notary-application`, ...(params ? [params] : [])] as const;
};

export const getGetApiPastDebtsNotaryApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsNotaryApplicationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPastDebtsNotaryApplicationQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>> = ({ signal }) =>
    getApiPastDebtsNotaryApplication(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPastDebtsNotaryApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>
>;
export type GetApiPastDebtsNotaryApplicationQueryError = ErrorType<unknown>;

export function useGetApiPastDebtsNotaryApplication<
  TData = Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsNotaryApplicationParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPastDebtsNotaryApplication<
  TData = Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsNotaryApplicationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPastDebtsNotaryApplication<
  TData = Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsNotaryApplicationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è –û–°–ò –Ω–æ—Ç–∞—Ä–∏—É—Å—É
 */

export function useGetApiPastDebtsNotaryApplication<
  TData = Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPastDebtsNotaryApplicationParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPastDebtsNotaryApplication>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPastDebtsNotaryApplicationQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

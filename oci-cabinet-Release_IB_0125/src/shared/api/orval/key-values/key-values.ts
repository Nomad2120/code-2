/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  GetApiKeyValues200One,
  GetApiKeyValues200Three,
  GetApiKeyValues200Two,
  GetApiKeyValuesParams,
  PostApiKeyValues200One,
  PostApiKeyValues200Three,
  PostApiKeyValues200Two
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É
 */
export const getApiKeyValuesKey = (
  key: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<string>({ url: `/api/KeyValues/${key}`, method: 'GET', signal }, options);
};

export const getGetApiKeyValuesKeyQueryKey = (key: string) => {
  return [`/api/KeyValues/${key}`] as const;
};

export const getGetApiKeyValuesKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiKeyValuesKey>>,
  TError = ErrorType<unknown>
>(
  key: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiKeyValuesKeyQueryKey(key);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiKeyValuesKey>>> = ({ signal }) =>
    getApiKeyValuesKey(key, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!key, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiKeyValuesKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiKeyValuesKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getApiKeyValuesKey>>>;
export type GetApiKeyValuesKeyQueryError = ErrorType<unknown>;

export function useGetApiKeyValuesKey<
  TData = Awaited<ReturnType<typeof getApiKeyValuesKey>>,
  TError = ErrorType<unknown>
>(
  key: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiKeyValuesKey<
  TData = Awaited<ReturnType<typeof getApiKeyValuesKey>>,
  TError = ErrorType<unknown>
>(
  key: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiKeyValuesKey<
  TData = Awaited<ReturnType<typeof getApiKeyValuesKey>>,
  TError = ErrorType<unknown>
>(
  key: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É
 */

export function useGetApiKeyValuesKey<
  TData = Awaited<ReturnType<typeof getApiKeyValuesKey>>,
  TError = ErrorType<unknown>
>(
  key: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValuesKey>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiKeyValuesKeyQueryOptions(key, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–∞–º
 */
export const getApiKeyValues = (
  params?: GetApiKeyValuesParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<GetApiKeyValues200One | GetApiKeyValues200Two | GetApiKeyValues200Three>(
    { url: `/api/KeyValues`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiKeyValuesQueryKey = (params?: GetApiKeyValuesParams) => {
  return [`/api/KeyValues`, ...(params ? [params] : [])] as const;
};

export const getGetApiKeyValuesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiKeyValues>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiKeyValuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiKeyValuesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiKeyValues>>> = ({ signal }) =>
    getApiKeyValues(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiKeyValues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiKeyValuesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiKeyValues>>>;
export type GetApiKeyValuesQueryError = ErrorType<unknown>;

export function useGetApiKeyValues<TData = Awaited<ReturnType<typeof getApiKeyValues>>, TError = ErrorType<unknown>>(
  params: undefined | GetApiKeyValuesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiKeyValues<TData = Awaited<ReturnType<typeof getApiKeyValues>>, TError = ErrorType<unknown>>(
  params?: GetApiKeyValuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiKeyValues<TData = Awaited<ReturnType<typeof getApiKeyValues>>, TError = ErrorType<unknown>>(
  params?: GetApiKeyValuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–∞–º
 */

export function useGetApiKeyValues<TData = Awaited<ReturnType<typeof getApiKeyValues>>, TError = ErrorType<unknown>>(
  params?: GetApiKeyValuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeyValues>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiKeyValuesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–∞–º
 */
export const postApiKeyValues = (
  postApiKeyValuesBody: BodyType<string[]>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<PostApiKeyValues200One | PostApiKeyValues200Two | PostApiKeyValues200Three>(
    {
      url: `/api/KeyValues`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postApiKeyValuesBody,
      signal
    },
    options
  );
};

export const getPostApiKeyValuesMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiKeyValues>>,
    TError,
    { data: BodyType<string[]> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiKeyValues>>,
  TError,
  { data: BodyType<string[]> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiKeyValues>>, { data: BodyType<string[]> }> = (
    props
  ) => {
    const { data } = props ?? {};

    return postApiKeyValues(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiKeyValuesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiKeyValues>>>;
export type PostApiKeyValuesMutationBody = BodyType<string[]>;
export type PostApiKeyValuesMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–∞–º
 */
export const usePostApiKeyValues = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiKeyValues>>,
    TError,
    { data: BodyType<string[]> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof postApiKeyValues>>, TError, { data: BodyType<string[]> }, TContext> => {
  const mutationOptions = getPostApiKeyValuesMutationOptions(options);

  return useMutation(mutationOptions);
};

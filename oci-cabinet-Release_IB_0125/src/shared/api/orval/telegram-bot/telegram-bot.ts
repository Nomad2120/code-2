/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type { RequestsTelegramCallMeBackNotificationRequest, RequestsTelegramSendMessage } from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
 */
export const getApiTelegramBotRestart = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>({ url: `/api/TelegramBot/restart`, method: 'GET', signal }, options);
};

export const getGetApiTelegramBotRestartQueryKey = () => {
  return [`/api/TelegramBot/restart`] as const;
};

export const getGetApiTelegramBotRestartQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestart>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTelegramBotRestartQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTelegramBotRestart>>> = ({ signal }) =>
    getApiTelegramBotRestart(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTelegramBotRestart>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTelegramBotRestartQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTelegramBotRestart>>>;
export type GetApiTelegramBotRestartQueryError = ErrorType<unknown>;

export function useGetApiTelegramBotRestart<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestart>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTelegramBotRestart<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestart>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTelegramBotRestart<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestart>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
 */

export function useGetApiTelegramBotRestart<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestart>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestart>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTelegramBotRestartQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export const getApiTelegramBotRestartSubscription = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>(
    { url: `/api/TelegramBot/restart-subscription`, method: 'GET', signal },
    options
  );
};

export const getGetApiTelegramBotRestartSubscriptionQueryKey = () => {
  return [`/api/TelegramBot/restart-subscription`] as const;
};

export const getGetApiTelegramBotRestartSubscriptionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTelegramBotRestartSubscriptionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>> = ({ signal }) =>
    getApiTelegramBotRestartSubscription(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTelegramBotRestartSubscriptionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>
>;
export type GetApiTelegramBotRestartSubscriptionQueryError = ErrorType<unknown>;

export function useGetApiTelegramBotRestartSubscription<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTelegramBotRestartSubscription<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTelegramBotRestartSubscription<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫
 */

export function useGetApiTelegramBotRestartSubscription<
  TData = Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotRestartSubscription>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTelegramBotRestartSubscriptionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export const getApiTelegramBotSendPhoneMessage = (
  phone: string,
  message: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>(
    { url: `/api/TelegramBot/send/${phone}/${message}`, method: 'GET', signal },
    options
  );
};

export const getGetApiTelegramBotSendPhoneMessageQueryKey = (phone: string, message: string) => {
  return [`/api/TelegramBot/send/${phone}/${message}`] as const;
};

export const getGetApiTelegramBotSendPhoneMessageQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  message: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTelegramBotSendPhoneMessageQueryKey(phone, message);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>> = ({ signal }) =>
    getApiTelegramBotSendPhoneMessage(phone, message, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(phone && message), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTelegramBotSendPhoneMessageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>
>;
export type GetApiTelegramBotSendPhoneMessageQueryError = ErrorType<unknown>;

export function useGetApiTelegramBotSendPhoneMessage<
  TData = Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  message: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTelegramBotSendPhoneMessage<
  TData = Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  message: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTelegramBotSendPhoneMessage<
  TData = Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  message: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */

export function useGetApiTelegramBotSendPhoneMessage<
  TData = Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  message: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTelegramBotSendPhoneMessage>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTelegramBotSendPhoneMessageQueryOptions(phone, message, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export const postApiTelegramBotSendPhone = (
  phone: BodyType<string>,
  postApiTelegramBotSendPhoneBody: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>(
    {
      url: `/api/TelegramBot/send/${phone}`,
      method: 'POST',
      headers: { 'Content-Type': 'text/plain' },
      data: postApiTelegramBotSendPhoneBody,
      signal
    },
    options
  );
};

export const getPostApiTelegramBotSendPhoneMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSendPhone>>,
    TError,
    { phone: string; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTelegramBotSendPhone>>,
  TError,
  { phone: string; data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTelegramBotSendPhone>>,
    { phone: string; data: BodyType<string> }
  > = (props) => {
    const { phone, data } = props ?? {};

    return postApiTelegramBotSendPhone(phone, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTelegramBotSendPhoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTelegramBotSendPhone>>
>;
export type PostApiTelegramBotSendPhoneMutationBody = BodyType<string>;
export type PostApiTelegramBotSendPhoneMutationError = ErrorType<unknown>;

/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export const usePostApiTelegramBotSendPhone = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSendPhone>>,
    TError,
    { phone: string; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTelegramBotSendPhone>>,
  TError,
  { phone: string; data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPostApiTelegramBotSendPhoneMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export const postApiTelegramBotSend = (
  requestsTelegramSendMessage: BodyType<RequestsTelegramSendMessage>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>(
    {
      url: `/api/TelegramBot/send`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsTelegramSendMessage,
      signal
    },
    options
  );
};

export const getPostApiTelegramBotSendMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSend>>,
    TError,
    { data: BodyType<RequestsTelegramSendMessage> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTelegramBotSend>>,
  TError,
  { data: BodyType<RequestsTelegramSendMessage> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTelegramBotSend>>,
    { data: BodyType<RequestsTelegramSendMessage> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiTelegramBotSend(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTelegramBotSendMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTelegramBotSend>>>;
export type PostApiTelegramBotSendMutationBody = BodyType<RequestsTelegramSendMessage>;
export type PostApiTelegramBotSendMutationError = ErrorType<unknown>;

/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export const usePostApiTelegramBotSend = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSend>>,
    TError,
    { data: BodyType<RequestsTelegramSendMessage> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTelegramBotSend>>,
  TError,
  { data: BodyType<RequestsTelegramSendMessage> },
  TContext
> => {
  const mutationOptions = getPostApiTelegramBotSendMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è–º
 */
export const postApiTelegramBotSendChairmans = (
  postApiTelegramBotSendChairmansBody: BodyType<string>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>(
    {
      url: `/api/TelegramBot/send/chairmans`,
      method: 'POST',
      headers: { 'Content-Type': 'text/plain' },
      data: postApiTelegramBotSendChairmansBody,
      signal
    },
    options
  );
};

export const getPostApiTelegramBotSendChairmansMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSendChairmans>>,
    TError,
    { data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTelegramBotSendChairmans>>,
  TError,
  { data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTelegramBotSendChairmans>>,
    { data: BodyType<string> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiTelegramBotSendChairmans(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTelegramBotSendChairmansMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTelegramBotSendChairmans>>
>;
export type PostApiTelegramBotSendChairmansMutationBody = BodyType<string>;
export type PostApiTelegramBotSendChairmansMutationError = ErrorType<unknown>;

/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è–º
 */
export const usePostApiTelegramBotSendChairmans = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSendChairmans>>,
    TError,
    { data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTelegramBotSendChairmans>>,
  TError,
  { data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPostApiTelegramBotSendChairmansMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
 */
export const postApiTelegramBotSendCallMeBack = (
  requestsTelegramCallMeBackNotificationRequest: BodyType<RequestsTelegramCallMeBackNotificationRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<void>(
    {
      url: `/api/TelegramBot/send/call-me-back`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsTelegramCallMeBackNotificationRequest,
      signal
    },
    options
  );
};

export const getPostApiTelegramBotSendCallMeBackMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSendCallMeBack>>,
    TError,
    { data: BodyType<RequestsTelegramCallMeBackNotificationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTelegramBotSendCallMeBack>>,
  TError,
  { data: BodyType<RequestsTelegramCallMeBackNotificationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTelegramBotSendCallMeBack>>,
    { data: BodyType<RequestsTelegramCallMeBackNotificationRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiTelegramBotSendCallMeBack(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTelegramBotSendCallMeBackMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTelegramBotSendCallMeBack>>
>;
export type PostApiTelegramBotSendCallMeBackMutationBody = BodyType<RequestsTelegramCallMeBackNotificationRequest>;
export type PostApiTelegramBotSendCallMeBackMutationError = ErrorType<unknown>;

/**
 * @summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
 */
export const usePostApiTelegramBotSendCallMeBack = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTelegramBotSendCallMeBack>>,
    TError,
    { data: BodyType<RequestsTelegramCallMeBackNotificationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTelegramBotSendCallMeBack>>,
  TError,
  { data: BodyType<RequestsTelegramCallMeBackNotificationRequest> },
  TContext
> => {
  const mutationOptions = getPostApiTelegramBotSendCallMeBackMutationOptions(options);

  return useMutation(mutationOptions);
};

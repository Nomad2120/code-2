/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbRegistrationAccount,
  RequestsRegistrationAccountRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É
 */
export const getApiRegistrationAccountsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbRegistrationAccount>(
    { url: `/api/RegistrationAccounts/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiRegistrationAccountsIdQueryKey = (id: number) => {
  return [`/api/RegistrationAccounts/${id}`] as const;
};

export const getGetApiRegistrationAccountsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRegistrationAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRegistrationAccountsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>> = ({ signal }) =>
    getApiRegistrationAccountsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRegistrationAccountsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiRegistrationAccountsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRegistrationAccountsId>>
>;
export type GetApiRegistrationAccountsIdQueryError = ErrorType<unknown>;

export function useGetApiRegistrationAccountsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationAccountsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationAccountsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É
 */

export function useGetApiRegistrationAccountsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationAccountsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiRegistrationAccountsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç
 */
export const putApiRegistrationAccountsId = (
  id: number,
  requestsRegistrationAccountRequest: BodyType<RequestsRegistrationAccountRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/RegistrationAccounts/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsRegistrationAccountRequest
    },
    options
  );
};

export const getPutApiRegistrationAccountsIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationAccountsId>>,
    TError,
    { id: number; data: BodyType<RequestsRegistrationAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRegistrationAccountsId>>,
  TError,
  { id: number; data: BodyType<RequestsRegistrationAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRegistrationAccountsId>>,
    { id: number; data: BodyType<RequestsRegistrationAccountRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiRegistrationAccountsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationAccountsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationAccountsId>>
>;
export type PutApiRegistrationAccountsIdMutationBody = BodyType<RequestsRegistrationAccountRequest>;
export type PutApiRegistrationAccountsIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç
 */
export const usePutApiRegistrationAccountsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationAccountsId>>,
    TError,
    { id: number; data: BodyType<RequestsRegistrationAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiRegistrationAccountsId>>,
  TError,
  { id: number; data: BodyType<RequestsRegistrationAccountRequest> },
  TContext
> => {
  const mutationOptions = getPutApiRegistrationAccountsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
 */
export const deleteApiRegistrationAccountsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/RegistrationAccounts/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiRegistrationAccountsIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRegistrationAccountsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiRegistrationAccountsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRegistrationAccountsId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteApiRegistrationAccountsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRegistrationAccountsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiRegistrationAccountsId>>
>;

export type DeleteApiRegistrationAccountsIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
 */
export const useDeleteApiRegistrationAccountsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRegistrationAccountsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiRegistrationAccountsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiRegistrationAccountsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
 */
export const postApiRegistrationAccounts = (
  requestsRegistrationAccountRequest: BodyType<RequestsRegistrationAccountRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbRegistrationAccount>(
    {
      url: `/api/RegistrationAccounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsRegistrationAccountRequest,
      signal
    },
    options
  );
};

export const getPostApiRegistrationAccountsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrationAccounts>>,
    TError,
    { data: BodyType<RequestsRegistrationAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRegistrationAccounts>>,
  TError,
  { data: BodyType<RequestsRegistrationAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRegistrationAccounts>>,
    { data: BodyType<RequestsRegistrationAccountRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRegistrationAccounts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRegistrationAccountsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRegistrationAccounts>>
>;
export type PostApiRegistrationAccountsMutationBody = BodyType<RequestsRegistrationAccountRequest>;
export type PostApiRegistrationAccountsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
 */
export const usePostApiRegistrationAccounts = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrationAccounts>>,
    TError,
    { data: BodyType<RequestsRegistrationAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiRegistrationAccounts>>,
  TError,
  { data: BodyType<RequestsRegistrationAccountRequest> },
  TContext
> => {
  const mutationOptions = getPostApiRegistrationAccountsMutationOptions(options);

  return useMutation(mutationOptions);
};

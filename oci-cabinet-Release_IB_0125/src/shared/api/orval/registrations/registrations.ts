/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbOsi,
  ApiResponse1OSICoreModelsDbRegistration,
  ApiResponse1OSICoreModelsDbRegistrationDoc,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistration,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistrationAccount,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistrationDoc,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesRequiredDocsResponse,
  ApiResponse1SystemInt32,
  GetApiRegistrationsReqdocsParams,
  PutApiRegistrationsIdSignParams,
  RequestsAddScanDoc,
  RequestsRegistrationRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
 */
export const getApiRegistrationsAll = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistration>(
    { url: `/api/Registrations/all`, method: 'GET', signal },
    options
  );
};

export const getGetApiRegistrationsAllQueryKey = () => {
  return [`/api/Registrations/all`] as const;
};

export const getGetApiRegistrationsAllQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRegistrationsAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRegistrationsAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRegistrationsAll>>> = ({ signal }) =>
    getApiRegistrationsAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRegistrationsAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiRegistrationsAllQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRegistrationsAll>>>;
export type GetApiRegistrationsAllQueryError = ErrorType<unknown>;

export function useGetApiRegistrationsAll<
  TData = Awaited<ReturnType<typeof getApiRegistrationsAll>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsAll<
  TData = Awaited<ReturnType<typeof getApiRegistrationsAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsAll<
  TData = Awaited<ReturnType<typeof getApiRegistrationsAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
 */

export function useGetApiRegistrationsAll<
  TData = Awaited<ReturnType<typeof getApiRegistrationsAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsAll>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiRegistrationsAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 */
export const getApiRegistrationsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbRegistration>(
    { url: `/api/Registrations/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiRegistrationsIdQueryKey = (id: number) => {
  return [`/api/Registrations/${id}`] as const;
};

export const getGetApiRegistrationsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRegistrationsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRegistrationsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRegistrationsId>>> = ({ signal }) =>
    getApiRegistrationsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRegistrationsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiRegistrationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRegistrationsId>>>;
export type GetApiRegistrationsIdQueryError = ErrorType<unknown>;

export function useGetApiRegistrationsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 */

export function useGetApiRegistrationsId<
  TData = Awaited<ReturnType<typeof getApiRegistrationsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiRegistrationsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const putApiRegistrationsId = (
  id: number,
  requestsRegistrationRequest: BodyType<RequestsRegistrationRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Registrations/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsRegistrationRequest
    },
    options
  );
};

export const getPutApiRegistrationsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsId>>,
    TError,
    { id: number; data: BodyType<RequestsRegistrationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRegistrationsId>>,
  TError,
  { id: number; data: BodyType<RequestsRegistrationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRegistrationsId>>,
    { id: number; data: BodyType<RequestsRegistrationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiRegistrationsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiRegistrationsId>>>;
export type PutApiRegistrationsIdMutationBody = BodyType<RequestsRegistrationRequest>;
export type PutApiRegistrationsIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const usePutApiRegistrationsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsId>>,
    TError,
    { id: number; data: BodyType<RequestsRegistrationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiRegistrationsId>>,
  TError,
  { id: number; data: BodyType<RequestsRegistrationRequest> },
  TContext
> => {
  const mutationOptions = getPutApiRegistrationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const deleteApiRegistrationsId = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Registrations/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiRegistrationsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiRegistrationsId>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRegistrationsId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRegistrationsId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteApiRegistrationsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRegistrationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRegistrationsId>>>;

export type DeleteApiRegistrationsIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const useDeleteApiRegistrationsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiRegistrationsId>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiRegistrationsId>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteApiRegistrationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const postApiRegistrations = (
  requestsRegistrationRequest: BodyType<RequestsRegistrationRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemInt32>(
    {
      url: `/api/Registrations`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsRegistrationRequest,
      signal
    },
    options
  );
};

export const getPostApiRegistrationsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrations>>,
    TError,
    { data: BodyType<RequestsRegistrationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRegistrations>>,
  TError,
  { data: BodyType<RequestsRegistrationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRegistrations>>,
    { data: BodyType<RequestsRegistrationRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRegistrations(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRegistrationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRegistrations>>>;
export type PostApiRegistrationsMutationBody = BodyType<RequestsRegistrationRequest>;
export type PostApiRegistrationsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const usePostApiRegistrations = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrations>>,
    TError,
    { data: BodyType<RequestsRegistrationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiRegistrations>>,
  TError,
  { data: BodyType<RequestsRegistrationRequest> },
  TContext
> => {
  const mutationOptions = getPostApiRegistrationsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
 */
export const putApiRegistrationsIdConfirmCreation = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Registrations/${id}/confirm-creation`, method: 'PUT' },
    options
  );
};

export const getPutApiRegistrationsIdConfirmCreationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdConfirmCreation>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRegistrationsIdConfirmCreation>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRegistrationsIdConfirmCreation>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return putApiRegistrationsIdConfirmCreation(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdConfirmCreationMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationsIdConfirmCreation>>
>;

export type PutApiRegistrationsIdConfirmCreationMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
 */
export const usePutApiRegistrationsIdConfirmCreation = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdConfirmCreation>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiRegistrationsIdConfirmCreation>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPutApiRegistrationsIdConfirmCreationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const putApiRegistrationsIdSign = (
  id: number,
  putApiRegistrationsIdSignBody: BodyType<string>,
  params: PutApiRegistrationsIdSignParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Registrations/${id}/sign`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: putApiRegistrationsIdSignBody,
      params
    },
    options
  );
};

export const getPutApiRegistrationsIdSignMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdSign>>,
    TError,
    { id: number; data: BodyType<string>; params: PutApiRegistrationsIdSignParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRegistrationsIdSign>>,
  TError,
  { id: number; data: BodyType<string>; params: PutApiRegistrationsIdSignParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRegistrationsIdSign>>,
    { id: number; data: BodyType<string>; params: PutApiRegistrationsIdSignParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiRegistrationsIdSign(id, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdSignMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationsIdSign>>
>;
export type PutApiRegistrationsIdSignMutationBody = BodyType<string>;
export type PutApiRegistrationsIdSignMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const usePutApiRegistrationsIdSign = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdSign>>,
    TError,
    { id: number; data: BodyType<string>; params: PutApiRegistrationsIdSignParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiRegistrationsIdSign>>,
  TError,
  { id: number; data: BodyType<string>; params: PutApiRegistrationsIdSignParams },
  TContext
> => {
  const mutationOptions = getPutApiRegistrationsIdSignMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export const putApiRegistrationsIdSignWoDoc = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Registrations/${id}/sign-wo-doc`, method: 'PUT' },
    options
  );
};

export const getPutApiRegistrationsIdSignWoDocMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdSignWoDoc>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRegistrationsIdSignWoDoc>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRegistrationsIdSignWoDoc>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return putApiRegistrationsIdSignWoDoc(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdSignWoDocMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationsIdSignWoDoc>>
>;

export type PutApiRegistrationsIdSignWoDocMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export const usePutApiRegistrationsIdSignWoDoc = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdSignWoDoc>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiRegistrationsIdSignWoDoc>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiRegistrationsIdSignWoDocMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const putApiRegistrationsIdUnsign = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Registrations/${id}/unsign`, method: 'PUT' }, options);
};

export const getPutApiRegistrationsIdUnsignMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdUnsign>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiRegistrationsIdUnsign>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRegistrationsIdUnsign>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return putApiRegistrationsIdUnsign(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdUnsignMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationsIdUnsign>>
>;

export type PutApiRegistrationsIdUnsignMutationError = ErrorType<unknown>;

/**
 * @summary –£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const usePutApiRegistrationsIdUnsign = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdUnsign>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiRegistrationsIdUnsign>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiRegistrationsIdUnsignMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const putApiRegistrationsIdConfirm = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Registrations/${id}/confirm`, method: 'PUT' }, options);
};

export const getPutApiRegistrationsIdConfirmMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdConfirm>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiRegistrationsIdConfirm>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiRegistrationsIdConfirm>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return putApiRegistrationsIdConfirm(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdConfirmMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationsIdConfirm>>
>;

export type PutApiRegistrationsIdConfirmMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
 */
export const usePutApiRegistrationsIdConfirm = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdConfirm>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiRegistrationsIdConfirm>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiRegistrationsIdConfirmMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°–æ–∑–¥–∞—Ç—å –û–°–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
 */
export const postApiRegistrationsIdCreateOsi = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsi>(
    { url: `/api/Registrations/${id}/create-osi`, method: 'POST', signal },
    options
  );
};

export const getPostApiRegistrationsIdCreateOsiMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrationsIdCreateOsi>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRegistrationsIdCreateOsi>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRegistrationsIdCreateOsi>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return postApiRegistrationsIdCreateOsi(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRegistrationsIdCreateOsiMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRegistrationsIdCreateOsi>>
>;

export type PostApiRegistrationsIdCreateOsiMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –û–°–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
 */
export const usePostApiRegistrationsIdCreateOsi = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrationsIdCreateOsi>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiRegistrationsIdCreateOsi>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiRegistrationsIdCreateOsiMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ
 */
export const postApiRegistrationsIdDocs = (
  id: number,
  requestsAddScanDoc: BodyType<RequestsAddScanDoc>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbRegistrationDoc>(
    {
      url: `/api/Registrations/${id}/docs`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAddScanDoc,
      signal
    },
    options
  );
};

export const getPostApiRegistrationsIdDocsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrationsIdDocs>>,
    TError,
    { id: number; data: BodyType<RequestsAddScanDoc> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRegistrationsIdDocs>>,
  TError,
  { id: number; data: BodyType<RequestsAddScanDoc> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRegistrationsIdDocs>>,
    { id: number; data: BodyType<RequestsAddScanDoc> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiRegistrationsIdDocs(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRegistrationsIdDocsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRegistrationsIdDocs>>
>;
export type PostApiRegistrationsIdDocsMutationBody = BodyType<RequestsAddScanDoc>;
export type PostApiRegistrationsIdDocsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ
 */
export const usePostApiRegistrationsIdDocs = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRegistrationsIdDocs>>,
    TError,
    { id: number; data: BodyType<RequestsAddScanDoc> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiRegistrationsIdDocs>>,
  TError,
  { id: number; data: BodyType<RequestsAddScanDoc> },
  TContext
> => {
  const mutationOptions = getPostApiRegistrationsIdDocsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ
 */
export const getApiRegistrationsIdDocs = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistrationDoc>(
    { url: `/api/Registrations/${id}/docs`, method: 'GET', signal },
    options
  );
};

export const getGetApiRegistrationsIdDocsQueryKey = (id: number) => {
  return [`/api/Registrations/${id}/docs`] as const;
};

export const getGetApiRegistrationsIdDocsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRegistrationsIdDocsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>> = ({ signal }) =>
    getApiRegistrationsIdDocs(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiRegistrationsIdDocsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>>;
export type GetApiRegistrationsIdDocsQueryError = ErrorType<unknown>;

export function useGetApiRegistrationsIdDocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsIdDocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsIdDocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—è–≤–∫–µ
 */

export function useGetApiRegistrationsIdDocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiRegistrationsIdDocsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
 */
export const getApiRegistrationsReqdocs = (
  params?: GetApiRegistrationsReqdocsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesRequiredDocsResponse>(
    { url: `/api/Registrations/reqdocs`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiRegistrationsReqdocsQueryKey = (params?: GetApiRegistrationsReqdocsParams) => {
  return [`/api/Registrations/reqdocs`, ...(params ? [params] : [])] as const;
};

export const getGetApiRegistrationsReqdocsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiRegistrationsReqdocsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRegistrationsReqdocsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>> = ({ signal }) =>
    getApiRegistrationsReqdocs(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiRegistrationsReqdocsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>>;
export type GetApiRegistrationsReqdocsQueryError = ErrorType<unknown>;

export function useGetApiRegistrationsReqdocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiRegistrationsReqdocsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsReqdocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiRegistrationsReqdocsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsReqdocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiRegistrationsReqdocsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
 */

export function useGetApiRegistrationsReqdocs<
  TData = Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiRegistrationsReqdocsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsReqdocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiRegistrationsReqdocsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É –∑–∞—è–≤–∫–∏
 */
export const deleteApiRegistrationsIdDocsDocId = (
  id: number,
  docId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Registrations/${id}/docs/${docId}`, method: 'DELETE' },
    options
  );
};

export const getDeleteApiRegistrationsIdDocsDocIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRegistrationsIdDocsDocId>>,
    TError,
    { id: number; docId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiRegistrationsIdDocsDocId>>,
  TError,
  { id: number; docId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiRegistrationsIdDocsDocId>>,
    { id: number; docId: number }
  > = (props) => {
    const { id, docId } = props ?? {};

    return deleteApiRegistrationsIdDocsDocId(id, docId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRegistrationsIdDocsDocIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiRegistrationsIdDocsDocId>>
>;

export type DeleteApiRegistrationsIdDocsDocIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É –∑–∞—è–≤–∫–∏
 */
export const useDeleteApiRegistrationsIdDocsDocId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRegistrationsIdDocsDocId>>,
    TError,
    { id: number; docId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiRegistrationsIdDocsDocId>>,
  TError,
  { id: number; docId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiRegistrationsIdDocsDocIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
 */
export const getApiRegistrationsIdAccounts = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistrationAccount>(
    { url: `/api/Registrations/${id}/accounts`, method: 'GET', signal },
    options
  );
};

export const getGetApiRegistrationsIdAccountsQueryKey = (id: number) => {
  return [`/api/Registrations/${id}/accounts`] as const;
};

export const getGetApiRegistrationsIdAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRegistrationsIdAccountsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>> = ({ signal }) =>
    getApiRegistrationsIdAccounts(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiRegistrationsIdAccountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>
>;
export type GetApiRegistrationsIdAccountsQueryError = ErrorType<unknown>;

export function useGetApiRegistrationsIdAccounts<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsIdAccounts<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiRegistrationsIdAccounts<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
 */

export function useGetApiRegistrationsIdAccounts<
  TData = Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiRegistrationsIdAccounts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiRegistrationsIdAccountsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
 */
export const putApiRegistrationsIdWizardStep = (
  id: number,
  putApiRegistrationsIdWizardStepBody: BodyType<string>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Registrations/${id}/wizard-step`,
      method: 'PUT',
      headers: { 'Content-Type': 'text/plain' },
      data: putApiRegistrationsIdWizardStepBody
    },
    options
  );
};

export const getPutApiRegistrationsIdWizardStepMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdWizardStep>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRegistrationsIdWizardStep>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRegistrationsIdWizardStep>>,
    { id: number; data: BodyType<string> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiRegistrationsIdWizardStep(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRegistrationsIdWizardStepMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRegistrationsIdWizardStep>>
>;
export type PutApiRegistrationsIdWizardStepMutationBody = BodyType<string>;
export type PutApiRegistrationsIdWizardStepMutationError = ErrorType<unknown>;

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
 */
export const usePutApiRegistrationsIdWizardStep = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRegistrationsIdWizardStep>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiRegistrationsIdWizardStep>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPutApiRegistrationsIdWizardStepMutationOptions(options);

  return useMutation(mutationOptions);
};

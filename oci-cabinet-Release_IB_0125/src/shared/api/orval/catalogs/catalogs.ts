/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAccountType,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAccuralMethod,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAreaType,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbBank,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbDocType,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbHouseState,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbKnp,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbServiceCompany,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbServiceGroup,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbUnionType
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ú–µ—Ç–æ–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */
export const getApiCatalogsAccuralMethods = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAccuralMethod>(
    { url: `/api/Catalogs/accural-methods`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsAccuralMethodsQueryKey = () => {
  return [`/api/Catalogs/accural-methods`] as const;
};

export const getGetApiCatalogsAccuralMethodsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsAccuralMethodsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>> = ({ signal }) =>
    getApiCatalogsAccuralMethods(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsAccuralMethodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>
>;
export type GetApiCatalogsAccuralMethodsQueryError = ErrorType<unknown>;

export function useGetApiCatalogsAccuralMethods<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsAccuralMethods<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsAccuralMethods<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ú–µ—Ç–æ–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */

export function useGetApiCatalogsAccuralMethods<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccuralMethods>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsAccuralMethodsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –í–∏–¥—ã –ø–æ–º–µ—â–µ–Ω–∏–π
 */
export const getApiCatalogsAreaTypes = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAreaType>(
    { url: `/api/Catalogs/area-types`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsAreaTypesQueryKey = () => {
  return [`/api/Catalogs/area-types`] as const;
};

export const getGetApiCatalogsAreaTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsAreaTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>> = ({ signal }) =>
    getApiCatalogsAreaTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsAreaTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>>;
export type GetApiCatalogsAreaTypesQueryError = ErrorType<unknown>;

export function useGetApiCatalogsAreaTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsAreaTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsAreaTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –í–∏–¥—ã –ø–æ–º–µ—â–µ–Ω–∏–π
 */

export function useGetApiCatalogsAreaTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAreaTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsAreaTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –¢–∏–ø—ã —Å—á–µ—Ç–æ–≤
 */
export const getApiCatalogsAccountTypes = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAccountType>(
    { url: `/api/Catalogs/account-types`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsAccountTypesQueryKey = () => {
  return [`/api/Catalogs/account-types`] as const;
};

export const getGetApiCatalogsAccountTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsAccountTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>> = ({ signal }) =>
    getApiCatalogsAccountTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsAccountTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>>;
export type GetApiCatalogsAccountTypesQueryError = ErrorType<unknown>;

export function useGetApiCatalogsAccountTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsAccountTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsAccountTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –¢–∏–ø—ã —Å—á–µ—Ç–æ–≤
 */

export function useGetApiCatalogsAccountTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsAccountTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsAccountTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ë–∞–Ω–∫–∏
 */
export const getApiCatalogsBanks = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbBank>(
    { url: `/api/Catalogs/banks`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsBanksQueryKey = () => {
  return [`/api/Catalogs/banks`] as const;
};

export const getGetApiCatalogsBanksQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsBanks>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsBanksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsBanks>>> = ({ signal }) =>
    getApiCatalogsBanks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsBanks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsBanksQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsBanks>>>;
export type GetApiCatalogsBanksQueryError = ErrorType<unknown>;

export function useGetApiCatalogsBanks<
  TData = Awaited<ReturnType<typeof getApiCatalogsBanks>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsBanks<
  TData = Awaited<ReturnType<typeof getApiCatalogsBanks>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsBanks<
  TData = Awaited<ReturnType<typeof getApiCatalogsBanks>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ë–∞–Ω–∫–∏
 */

export function useGetApiCatalogsBanks<
  TData = Awaited<ReturnType<typeof getApiCatalogsBanks>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsBanks>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsBanksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –í–∏–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
export const getApiCatalogsDocTypes = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbDocType>(
    { url: `/api/Catalogs/doc-types`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsDocTypesQueryKey = () => {
  return [`/api/Catalogs/doc-types`] as const;
};

export const getGetApiCatalogsDocTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsDocTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsDocTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>> = ({ signal }) =>
    getApiCatalogsDocTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsDocTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsDocTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>>;
export type GetApiCatalogsDocTypesQueryError = ErrorType<unknown>;

export function useGetApiCatalogsDocTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsDocTypes>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsDocTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsDocTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsDocTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsDocTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –í–∏–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */

export function useGetApiCatalogsDocTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsDocTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsDocTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsDocTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–º–æ–≤
 */
export const getApiCatalogsHouseStates = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbHouseState>(
    { url: `/api/Catalogs/house-states`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsHouseStatesQueryKey = () => {
  return [`/api/Catalogs/house-states`] as const;
};

export const getGetApiCatalogsHouseStatesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsHouseStates>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsHouseStatesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>> = ({ signal }) =>
    getApiCatalogsHouseStates(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsHouseStates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsHouseStatesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>>;
export type GetApiCatalogsHouseStatesQueryError = ErrorType<unknown>;

export function useGetApiCatalogsHouseStates<
  TData = Awaited<ReturnType<typeof getApiCatalogsHouseStates>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsHouseStates<
  TData = Awaited<ReturnType<typeof getApiCatalogsHouseStates>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsHouseStates<
  TData = Awaited<ReturnType<typeof getApiCatalogsHouseStates>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–º–æ–≤
 */

export function useGetApiCatalogsHouseStates<
  TData = Awaited<ReturnType<typeof getApiCatalogsHouseStates>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsHouseStates>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsHouseStatesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–ø–∏—Å–æ–∫ –ö–ù–ü
 */
export const getApiCatalogsKnp = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbKnp>(
    { url: `/api/Catalogs/knp`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsKnpQueryKey = () => {
  return [`/api/Catalogs/knp`] as const;
};

export const getGetApiCatalogsKnpQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsKnp>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsKnpQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsKnp>>> = ({ signal }) =>
    getApiCatalogsKnp(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsKnp>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsKnpQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsKnp>>>;
export type GetApiCatalogsKnpQueryError = ErrorType<unknown>;

export function useGetApiCatalogsKnp<
  TData = Awaited<ReturnType<typeof getApiCatalogsKnp>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsKnp<
  TData = Awaited<ReturnType<typeof getApiCatalogsKnp>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsKnp<
  TData = Awaited<ReturnType<typeof getApiCatalogsKnp>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ –ö–ù–ü
 */

export function useGetApiCatalogsKnp<
  TData = Awaited<ReturnType<typeof getApiCatalogsKnp>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsKnp>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsKnpQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –í–∏–¥—ã —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
 */
export const getApiCatalogsServiceCompanies = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbServiceCompany>(
    { url: `/api/Catalogs/service-companies`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsServiceCompaniesQueryKey = () => {
  return [`/api/Catalogs/service-companies`] as const;
};

export const getGetApiCatalogsServiceCompaniesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsServiceCompaniesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>> = ({ signal }) =>
    getApiCatalogsServiceCompanies(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsServiceCompaniesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>
>;
export type GetApiCatalogsServiceCompaniesQueryError = ErrorType<unknown>;

export function useGetApiCatalogsServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –í–∏–¥—ã —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
 */

export function useGetApiCatalogsServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceCompanies>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsServiceCompaniesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ì—Ä—É–ø–ø—ã —É—Å–ª—É–≥
 */
export const getApiCatalogsServiceGroups = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbServiceGroup>(
    { url: `/api/Catalogs/service-groups`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsServiceGroupsQueryKey = () => {
  return [`/api/Catalogs/service-groups`] as const;
};

export const getGetApiCatalogsServiceGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsServiceGroupsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>> = ({ signal }) =>
    getApiCatalogsServiceGroups(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsServiceGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>
>;
export type GetApiCatalogsServiceGroupsQueryError = ErrorType<unknown>;

export function useGetApiCatalogsServiceGroups<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsServiceGroups<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsServiceGroups<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ì—Ä—É–ø–ø—ã —É—Å–ª—É–≥
 */

export function useGetApiCatalogsServiceGroups<
  TData = Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsServiceGroups>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsServiceGroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –¢–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π
 */
export const getApiCatalogsUnionTypes = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbUnionType>(
    { url: `/api/Catalogs/union-types`, method: 'GET', signal },
    options
  );
};

export const getGetApiCatalogsUnionTypesQueryKey = () => {
  return [`/api/Catalogs/union-types`] as const;
};

export const getGetApiCatalogsUnionTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCatalogsUnionTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>> = ({ signal }) =>
    getApiCatalogsUnionTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiCatalogsUnionTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>>;
export type GetApiCatalogsUnionTypesQueryError = ErrorType<unknown>;

export function useGetApiCatalogsUnionTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsUnionTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiCatalogsUnionTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –¢–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π
 */

export function useGetApiCatalogsUnionTypes<
  TData = Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCatalogsUnionTypes>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiCatalogsUnionTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

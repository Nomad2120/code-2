/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbOsiServiceCompany,
  RequestsOsiServiceCompanyRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –û–°–ò
 */
export const getApiOsiServiceCompaniesId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiServiceCompany>(
    { url: `/api/OsiServiceCompanies/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiServiceCompaniesIdQueryKey = (id: number) => {
  return [`/api/OsiServiceCompanies/${id}`] as const;
};

export const getGetApiOsiServiceCompaniesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiServiceCompaniesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>> = ({ signal }) =>
    getApiOsiServiceCompaniesId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiServiceCompaniesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>
>;
export type GetApiOsiServiceCompaniesIdQueryError = ErrorType<unknown>;

export function useGetApiOsiServiceCompaniesId<
  TData = Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiServiceCompaniesId<
  TData = Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiServiceCompaniesId<
  TData = Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –û–°–ò
 */

export function useGetApiOsiServiceCompaniesId<
  TData = Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiServiceCompaniesId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiServiceCompaniesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –û–°–ò
 */
export const putApiOsiServiceCompaniesId = (
  id: number,
  requestsOsiServiceCompanyRequest: BodyType<RequestsOsiServiceCompanyRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/OsiServiceCompanies/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsOsiServiceCompanyRequest
    },
    options
  );
};

export const getPutApiOsiServiceCompaniesIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServiceCompaniesId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiServiceCompanyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiServiceCompaniesId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiServiceCompanyRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiServiceCompaniesId>>,
    { id: number; data: BodyType<RequestsOsiServiceCompanyRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOsiServiceCompaniesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiServiceCompaniesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOsiServiceCompaniesId>>
>;
export type PutApiOsiServiceCompaniesIdMutationBody = BodyType<RequestsOsiServiceCompanyRequest>;
export type PutApiOsiServiceCompaniesIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –û–°–ò
 */
export const usePutApiOsiServiceCompaniesId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiServiceCompaniesId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiServiceCompanyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiServiceCompaniesId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiServiceCompanyRequest> },
  TContext
> => {
  const mutationOptions = getPutApiOsiServiceCompaniesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
 */
export const deleteApiOsiServiceCompaniesId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/OsiServiceCompanies/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiOsiServiceCompaniesIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiOsiServiceCompaniesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiOsiServiceCompaniesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiOsiServiceCompaniesId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteApiOsiServiceCompaniesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiOsiServiceCompaniesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiOsiServiceCompaniesId>>
>;

export type DeleteApiOsiServiceCompaniesIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
 */
export const useDeleteApiOsiServiceCompaniesId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiOsiServiceCompaniesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiOsiServiceCompaniesId>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteApiOsiServiceCompaniesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –û–°–ò
 */
export const postApiOsiServiceCompanies = (
  requestsOsiServiceCompanyRequest: BodyType<RequestsOsiServiceCompanyRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiServiceCompany>(
    {
      url: `/api/OsiServiceCompanies`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsOsiServiceCompanyRequest,
      signal
    },
    options
  );
};

export const getPostApiOsiServiceCompaniesMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiServiceCompanies>>,
    TError,
    { data: BodyType<RequestsOsiServiceCompanyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOsiServiceCompanies>>,
  TError,
  { data: BodyType<RequestsOsiServiceCompanyRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOsiServiceCompanies>>,
    { data: BodyType<RequestsOsiServiceCompanyRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOsiServiceCompanies(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOsiServiceCompaniesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOsiServiceCompanies>>
>;
export type PostApiOsiServiceCompaniesMutationBody = BodyType<RequestsOsiServiceCompanyRequest>;
export type PostApiOsiServiceCompaniesMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –û–°–ò
 */
export const usePostApiOsiServiceCompanies = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiServiceCompanies>>,
    TError,
    { data: BodyType<RequestsOsiServiceCompanyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOsiServiceCompanies>>,
  TError,
  { data: BodyType<RequestsOsiServiceCompanyRequest> },
  TContext
> => {
  const mutationOptions = getPostApiOsiServiceCompaniesMutationOptions(options);

  return useMutation(mutationOptions);
};

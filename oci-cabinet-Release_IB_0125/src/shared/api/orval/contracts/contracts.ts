/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type { ApiResponse, GetApiContractsCheckParams } from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getApiContractsCheck = (
  params: GetApiContractsCheckParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Contracts/check`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiContractsCheckQueryKey = (params: GetApiContractsCheckParams) => {
  return [`/api/Contracts/check`, ...(params ? [params] : [])] as const;
};

export const getGetApiContractsCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiContractsCheck>>,
  TError = ErrorType<unknown>
>(
  params: GetApiContractsCheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiContractsCheckQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiContractsCheck>>> = ({ signal }) =>
    getApiContractsCheck(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiContractsCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiContractsCheckQueryResult = NonNullable<Awaited<ReturnType<typeof getApiContractsCheck>>>;
export type GetApiContractsCheckQueryError = ErrorType<unknown>;

export function useGetApiContractsCheck<
  TData = Awaited<ReturnType<typeof getApiContractsCheck>>,
  TError = ErrorType<unknown>
>(
  params: GetApiContractsCheckParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiContractsCheck<
  TData = Awaited<ReturnType<typeof getApiContractsCheck>>,
  TError = ErrorType<unknown>
>(
  params: GetApiContractsCheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiContractsCheck<
  TData = Awaited<ReturnType<typeof getApiContractsCheck>>,
  TError = ErrorType<unknown>
>(
  params: GetApiContractsCheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiContractsCheck<
  TData = Awaited<ReturnType<typeof getApiContractsCheck>>,
  TError = ErrorType<unknown>
>(
  params: GetApiContractsCheckParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiContractsCheck>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiContractsCheckQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

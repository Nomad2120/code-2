/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbAbonent,
  ApiResponse1OSICoreModelsDbArendator,
  ApiResponse1OSICoreModelsDbOsi,
  RequestsAbonentRequest,
  RequestsArendatorRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const getApiAbonentsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAbonent>(
    { url: `/api/Abonents/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAbonentsIdQueryKey = (id: number) => {
  return [`/api/Abonents/${id}`] as const;
};

export const getGetApiAbonentsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAbonentsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAbonentsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAbonentsId>>> = ({ signal }) =>
    getApiAbonentsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAbonentsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAbonentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAbonentsId>>>;
export type GetApiAbonentsIdQueryError = ErrorType<unknown>;

export function useGetApiAbonentsId<TData = Awaited<ReturnType<typeof getApiAbonentsId>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAbonentsId<TData = Awaited<ReturnType<typeof getApiAbonentsId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAbonentsId<TData = Awaited<ReturnType<typeof getApiAbonentsId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */

export function useGetApiAbonentsId<TData = Awaited<ReturnType<typeof getApiAbonentsId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAbonentsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const putApiAbonentsId = (
  id: number,
  requestsAbonentRequest: BodyType<RequestsAbonentRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Abonents/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAbonentRequest
    },
    options
  );
};

export const getPutApiAbonentsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAbonentsId>>,
    TError,
    { id: number; data: BodyType<RequestsAbonentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiAbonentsId>>,
  TError,
  { id: number; data: BodyType<RequestsAbonentRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiAbonentsId>>,
    { id: number; data: BodyType<RequestsAbonentRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiAbonentsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiAbonentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAbonentsId>>>;
export type PutApiAbonentsIdMutationBody = BodyType<RequestsAbonentRequest>;
export type PutApiAbonentsIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const usePutApiAbonentsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAbonentsId>>,
    TError,
    { id: number; data: BodyType<RequestsAbonentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiAbonentsId>>,
  TError,
  { id: number; data: BodyType<RequestsAbonentRequest> },
  TContext
> => {
  const mutationOptions = getPutApiAbonentsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const deleteApiAbonentsId = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Abonents/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiAbonentsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiAbonentsId>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAbonentsId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAbonentsId>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteApiAbonentsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiAbonentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAbonentsId>>>;

export type DeleteApiAbonentsIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const useDeleteApiAbonentsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiAbonentsId>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiAbonentsId>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteApiAbonentsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */
export const getApiAbonentsPaymentServiceAbonentNum = (
  abonentNum: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAbonent>(
    { url: `/api/Abonents/payment-service/${abonentNum}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAbonentsPaymentServiceAbonentNumQueryKey = (abonentNum: string) => {
  return [`/api/Abonents/payment-service/${abonentNum}`] as const;
};

export const getGetApiAbonentsPaymentServiceAbonentNumQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>,
  TError = ErrorType<unknown>
>(
  abonentNum: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAbonentsPaymentServiceAbonentNumQueryKey(abonentNum);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>> = ({ signal }) =>
    getApiAbonentsPaymentServiceAbonentNum(abonentNum, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentNum, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAbonentsPaymentServiceAbonentNumQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>
>;
export type GetApiAbonentsPaymentServiceAbonentNumQueryError = ErrorType<unknown>;

export function useGetApiAbonentsPaymentServiceAbonentNum<
  TData = Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>,
  TError = ErrorType<unknown>
>(
  abonentNum: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAbonentsPaymentServiceAbonentNum<
  TData = Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>,
  TError = ErrorType<unknown>
>(
  abonentNum: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAbonentsPaymentServiceAbonentNum<
  TData = Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>,
  TError = ErrorType<unknown>
>(
  abonentNum: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */

export function useGetApiAbonentsPaymentServiceAbonentNum<
  TData = Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>,
  TError = ErrorType<unknown>
>(
  abonentNum: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsPaymentServiceAbonentNum>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAbonentsPaymentServiceAbonentNumQueryOptions(abonentNum, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const postApiAbonents = (
  requestsAbonentRequest: BodyType<RequestsAbonentRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAbonent>(
    {
      url: `/api/Abonents`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAbonentRequest,
      signal
    },
    options
  );
};

export const getPostApiAbonentsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAbonents>>,
    TError,
    { data: BodyType<RequestsAbonentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAbonents>>,
  TError,
  { data: BodyType<RequestsAbonentRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAbonents>>,
    { data: BodyType<RequestsAbonentRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAbonents(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAbonentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAbonents>>>;
export type PostApiAbonentsMutationBody = BodyType<RequestsAbonentRequest>;
export type PostApiAbonentsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
export const usePostApiAbonents = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAbonents>>,
    TError,
    { data: BodyType<RequestsAbonentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAbonents>>,
  TError,
  { data: BodyType<RequestsAbonentRequest> },
  TContext
> => {
  const mutationOptions = getPostApiAbonentsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –û–°–ò –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É
 */
export const getApiAbonentsIdGetOsi = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsi>(
    { url: `/api/Abonents/${id}/get-osi`, method: 'GET', signal },
    options
  );
};

export const getGetApiAbonentsIdGetOsiQueryKey = (id: number) => {
  return [`/api/Abonents/${id}/get-osi`] as const;
};

export const getGetApiAbonentsIdGetOsiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAbonentsIdGetOsiQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>> = ({ signal }) =>
    getApiAbonentsIdGetOsi(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAbonentsIdGetOsiQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>>;
export type GetApiAbonentsIdGetOsiQueryError = ErrorType<unknown>;

export function useGetApiAbonentsIdGetOsi<
  TData = Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAbonentsIdGetOsi<
  TData = Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAbonentsIdGetOsi<
  TData = Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –û–°–ò –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É
 */

export function useGetApiAbonentsIdGetOsi<
  TData = Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAbonentsIdGetOsi>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAbonentsIdGetOsiQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
 */
export const postApiAbonentsArendator = (
  requestsArendatorRequest: BodyType<RequestsArendatorRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbArendator>(
    {
      url: `/api/Abonents/arendator`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsArendatorRequest,
      signal
    },
    options
  );
};

export const getPostApiAbonentsArendatorMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAbonentsArendator>>,
    TError,
    { data: BodyType<RequestsArendatorRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAbonentsArendator>>,
  TError,
  { data: BodyType<RequestsArendatorRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAbonentsArendator>>,
    { data: BodyType<RequestsArendatorRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAbonentsArendator(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAbonentsArendatorMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAbonentsArendator>>>;
export type PostApiAbonentsArendatorMutationBody = BodyType<RequestsArendatorRequest>;
export type PostApiAbonentsArendatorMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
 */
export const usePostApiAbonentsArendator = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAbonentsArendator>>,
    TError,
    { data: BodyType<RequestsArendatorRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAbonentsArendator>>,
  TError,
  { data: BodyType<RequestsArendatorRequest> },
  TContext
> => {
  const mutationOptions = getPostApiAbonentsArendatorMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsBanksNotProcessedPayment,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsBanksPaymentOrder,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsReportsSvodPaymentOrder,
  GetApiPaymentOrdersNotProcessedPaymentsParams,
  GetApiPaymentOrdersPaymentOrdersParams,
  GetApiPaymentOrdersSvodOsiIdParams,
  PostApiPaymentOrdersProcessPaymentsParams
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –°–≤–æ–¥ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π –ø–æ –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiPaymentOrdersSvodOsiId = (
  osiId: number,
  params: GetApiPaymentOrdersSvodOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsReportsSvodPaymentOrder>(
    { url: `/api/PaymentOrders/svod/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiPaymentOrdersSvodOsiIdQueryKey = (osiId: number, params: GetApiPaymentOrdersSvodOsiIdParams) => {
  return [`/api/PaymentOrders/svod/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiPaymentOrdersSvodOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiPaymentOrdersSvodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPaymentOrdersSvodOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>> = ({ signal }) =>
    getApiPaymentOrdersSvodOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPaymentOrdersSvodOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>
>;
export type GetApiPaymentOrdersSvodOsiIdQueryError = ErrorType<unknown>;

export function useGetApiPaymentOrdersSvodOsiId<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiPaymentOrdersSvodOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPaymentOrdersSvodOsiId<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiPaymentOrdersSvodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPaymentOrdersSvodOsiId<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiPaymentOrdersSvodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–≤–æ–¥ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π –ø–æ –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiPaymentOrdersSvodOsiId<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiPaymentOrdersSvodOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersSvodOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPaymentOrdersSvodOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */
export const getApiPaymentOrdersNotProcessedPayments = (
  params: GetApiPaymentOrdersNotProcessedPaymentsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsBanksNotProcessedPayment>(
    { url: `/api/PaymentOrders/NotProcessedPayments`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiPaymentOrdersNotProcessedPaymentsQueryKey = (
  params: GetApiPaymentOrdersNotProcessedPaymentsParams
) => {
  return [`/api/PaymentOrders/NotProcessedPayments`, ...(params ? [params] : [])] as const;
};

export const getGetApiPaymentOrdersNotProcessedPaymentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersNotProcessedPaymentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPaymentOrdersNotProcessedPaymentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>> = ({ signal }) =>
    getApiPaymentOrdersNotProcessedPayments(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPaymentOrdersNotProcessedPaymentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>
>;
export type GetApiPaymentOrdersNotProcessedPaymentsQueryError = ErrorType<unknown>;

export function useGetApiPaymentOrdersNotProcessedPayments<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersNotProcessedPaymentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPaymentOrdersNotProcessedPayments<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersNotProcessedPaymentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPaymentOrdersNotProcessedPayments<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersNotProcessedPaymentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */

export function useGetApiPaymentOrdersNotProcessedPayments<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersNotProcessedPaymentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersNotProcessedPayments>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPaymentOrdersNotProcessedPaymentsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–µ—Ä–µ–¥–∞—á–∞ –ë–∞–Ω–∫–æ–º —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ø–µ—à–Ω–æ–π —Å–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const postApiPaymentOrdersProcessPayments = (
  params: PostApiPaymentOrdersProcessPaymentsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/PaymentOrders/ProcessPayments`, method: 'POST', params, signal },
    options
  );
};

export const getPostApiPaymentOrdersProcessPaymentsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPaymentOrdersProcessPayments>>,
    TError,
    { params: PostApiPaymentOrdersProcessPaymentsParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPaymentOrdersProcessPayments>>,
  TError,
  { params: PostApiPaymentOrdersProcessPaymentsParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPaymentOrdersProcessPayments>>,
    { params: PostApiPaymentOrdersProcessPaymentsParams }
  > = (props) => {
    const { params } = props ?? {};

    return postApiPaymentOrdersProcessPayments(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPaymentOrdersProcessPaymentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPaymentOrdersProcessPayments>>
>;

export type PostApiPaymentOrdersProcessPaymentsMutationError = ErrorType<unknown>;

/**
 * @summary –ü–µ—Ä–µ–¥–∞—á–∞ –ë–∞–Ω–∫–æ–º —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ø–µ—à–Ω–æ–π —Å–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const usePostApiPaymentOrdersProcessPayments = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPaymentOrdersProcessPayments>>,
    TError,
    { params: PostApiPaymentOrdersProcessPaymentsParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPaymentOrdersProcessPayments>>,
  TError,
  { params: PostApiPaymentOrdersProcessPaymentsParams },
  TContext
> => {
  const mutationOptions = getPostApiPaymentOrdersProcessPaymentsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */
export const getApiPaymentOrdersPaymentOrders = (
  params: GetApiPaymentOrdersPaymentOrdersParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsBanksPaymentOrder>(
    { url: `/api/PaymentOrders/PaymentOrders`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiPaymentOrdersPaymentOrdersQueryKey = (params: GetApiPaymentOrdersPaymentOrdersParams) => {
  return [`/api/PaymentOrders/PaymentOrders`, ...(params ? [params] : [])] as const;
};

export const getGetApiPaymentOrdersPaymentOrdersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersPaymentOrdersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPaymentOrdersPaymentOrdersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>> = ({ signal }) =>
    getApiPaymentOrdersPaymentOrders(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPaymentOrdersPaymentOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>
>;
export type GetApiPaymentOrdersPaymentOrdersQueryError = ErrorType<unknown>;

export function useGetApiPaymentOrdersPaymentOrders<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersPaymentOrdersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPaymentOrdersPaymentOrders<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersPaymentOrdersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPaymentOrdersPaymentOrders<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersPaymentOrdersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
 */

export function useGetApiPaymentOrdersPaymentOrders<
  TData = Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>,
  TError = ErrorType<unknown>
>(
  params: GetApiPaymentOrdersPaymentOrdersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPaymentOrdersPaymentOrders>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPaymentOrdersPaymentOrdersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsResponsesUserResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsi,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistration,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbUser,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesUserAffiliation,
  PostApiUsersIdClearAllInformationParams,
  RequestsChangePasswordRequest,
  RequestsResetPasswordRequest,
  RequestsUserRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export const getApiUsers = (options?: SecondParameter<typeof axiosForReactQueryInstance>, signal?: AbortSignal) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesUserResponse>(
    { url: `/api/Users`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersQueryKey = () => {
  return [`/api/Users`] as const;
};

export const getGetApiUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) =>
    getApiUsers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>;
export type GetApiUsersQueryError = ErrorType<unknown>;

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Id
 */
export const getApiUsersId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesUserResponse>(
    { url: `/api/Users/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersIdQueryKey = (id: number) => {
  return [`/api/Users/${id}`] as const;
};

export const getGetApiUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({ signal }) =>
    getApiUsersId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersId>>>;
export type GetApiUsersIdQueryError = ErrorType<unknown>;

export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Id
 */

export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const putApiUsersId = (
  id: number,
  requestsUserRequest: BodyType<RequestsUserRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Users/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsUserRequest
    },
    options
  );
};

export const getPutApiUsersIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersId>>,
    TError,
    { id: number; data: BodyType<RequestsUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsersId>>,
  TError,
  { id: number; data: BodyType<RequestsUserRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersId>>,
    { id: number; data: BodyType<RequestsUserRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiUsersId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersId>>>;
export type PutApiUsersIdMutationBody = BodyType<RequestsUserRequest>;
export type PutApiUsersIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePutApiUsersId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersId>>,
    TError,
    { id: number; data: BodyType<RequestsUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsersId>>,
  TError,
  { id: number; data: BodyType<RequestsUserRequest> },
  TContext
> => {
  const mutationOptions = getPutApiUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É (–æ–Ω –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω)
 */
export const getApiUsersCode = (
  code: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesUserResponse>(
    { url: `/api/Users/${code}`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersCodeQueryKey = (code: string) => {
  return [`/api/Users/${code}`] as const;
};

export const getGetApiUsersCodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersCode>>,
  TError = ErrorType<unknown>
>(
  code: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersCodeQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersCode>>> = ({ signal }) =>
    getApiUsersCode(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersCode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersCode>>>;
export type GetApiUsersCodeQueryError = ErrorType<unknown>;

export function useGetApiUsersCode<TData = Awaited<ReturnType<typeof getApiUsersCode>>, TError = ErrorType<unknown>>(
  code: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersCode<TData = Awaited<ReturnType<typeof getApiUsersCode>>, TError = ErrorType<unknown>>(
  code: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersCode<TData = Awaited<ReturnType<typeof getApiUsersCode>>, TError = ErrorType<unknown>>(
  code: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É (–æ–Ω –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω)
 */

export function useGetApiUsersCode<TData = Awaited<ReturnType<typeof getApiUsersCode>>, TError = ErrorType<unknown>>(
  code: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersCode>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersCodeQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getApiUsersIdRegistrations = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbRegistration>(
    { url: `/api/Users/${id}/registrations`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersIdRegistrationsQueryKey = (id: number) => {
  return [`/api/Users/${id}/registrations`] as const;
};

export const getGetApiUsersIdRegistrationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdRegistrations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdRegistrationsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>> = ({ signal }) =>
    getApiUsersIdRegistrations(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdRegistrations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersIdRegistrationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>>;
export type GetApiUsersIdRegistrationsQueryError = ErrorType<unknown>;

export function useGetApiUsersIdRegistrations<
  TData = Awaited<ReturnType<typeof getApiUsersIdRegistrations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersIdRegistrations<
  TData = Awaited<ReturnType<typeof getApiUsersIdRegistrations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersIdRegistrations<
  TData = Awaited<ReturnType<typeof getApiUsersIdRegistrations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetApiUsersIdRegistrations<
  TData = Awaited<ReturnType<typeof getApiUsersIdRegistrations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdRegistrations>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersIdRegistrationsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –û–°–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getApiUsersIdOsi = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsi>(
    { url: `/api/Users/${id}/osi`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersIdOsiQueryKey = (id: number) => {
  return [`/api/Users/${id}/osi`] as const;
};

export const getGetApiUsersIdOsiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdOsi>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdOsiQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersIdOsi>>> = ({ signal }) =>
    getApiUsersIdOsi(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdOsi>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersIdOsiQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersIdOsi>>>;
export type GetApiUsersIdOsiQueryError = ErrorType<unknown>;

export function useGetApiUsersIdOsi<TData = Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersIdOsi<TData = Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersIdOsi<TData = Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –û–°–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetApiUsersIdOsi<TData = Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdOsi>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersIdOsiQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const putApiUsersIdChangePassword = (
  id: number,
  requestsChangePasswordRequest: BodyType<RequestsChangePasswordRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Users/${id}/change-password`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsChangePasswordRequest
    },
    options
  );
};

export const getPutApiUsersIdChangePasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdChangePassword>>,
    TError,
    { id: number; data: BodyType<RequestsChangePasswordRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsersIdChangePassword>>,
  TError,
  { id: number; data: BodyType<RequestsChangePasswordRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersIdChangePassword>>,
    { id: number; data: BodyType<RequestsChangePasswordRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiUsersIdChangePassword(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsersIdChangePassword>>
>;
export type PutApiUsersIdChangePasswordMutationBody = BodyType<RequestsChangePasswordRequest>;
export type PutApiUsersIdChangePasswordMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePutApiUsersIdChangePassword = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdChangePassword>>,
    TError,
    { id: number; data: BodyType<RequestsChangePasswordRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsersIdChangePassword>>,
  TError,
  { id: number; data: BodyType<RequestsChangePasswordRequest> },
  TContext
> => {
  const mutationOptions = getPutApiUsersIdChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –û–¢–ü
 */
export const putApiUsersIdResetPassword = (
  id: number,
  requestsResetPasswordRequest: BodyType<RequestsResetPasswordRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Users/${id}/reset-password`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsResetPasswordRequest
    },
    options
  );
};

export const getPutApiUsersIdResetPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdResetPassword>>,
    TError,
    { id: number; data: BodyType<RequestsResetPasswordRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsersIdResetPassword>>,
  TError,
  { id: number; data: BodyType<RequestsResetPasswordRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersIdResetPassword>>,
    { id: number; data: BodyType<RequestsResetPasswordRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiUsersIdResetPassword(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsersIdResetPassword>>
>;
export type PutApiUsersIdResetPasswordMutationBody = BodyType<RequestsResetPasswordRequest>;
export type PutApiUsersIdResetPasswordMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –û–¢–ü
 */
export const usePutApiUsersIdResetPassword = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdResetPassword>>,
    TError,
    { id: number; data: BodyType<RequestsResetPasswordRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsersIdResetPassword>>,
  TError,
  { id: number; data: BodyType<RequestsResetPasswordRequest> },
  TContext
> => {
  const mutationOptions = getPutApiUsersIdResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const putApiUsersIdSetPassword = (
  id: number,
  putApiUsersIdSetPasswordBody: BodyType<string>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Users/${id}/set-password`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: putApiUsersIdSetPasswordBody
    },
    options
  );
};

export const getPutApiUsersIdSetPasswordMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdSetPassword>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsersIdSetPassword>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersIdSetPassword>>,
    { id: number; data: BodyType<string> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiUsersIdSetPassword(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdSetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersIdSetPassword>>>;
export type PutApiUsersIdSetPasswordMutationBody = BodyType<string>;
export type PutApiUsersIdSetPasswordMutationError = ErrorType<unknown>;

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePutApiUsersIdSetPassword = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdSetPassword>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsersIdSetPassword>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPutApiUsersIdSetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∑–∞—è–≤–∫–∏, –û–°–ò, —É—Å–ª—É–≥–∏, –∞–±–æ–Ω–µ–Ω—Ç—ã, –ø–ª–∞–Ω—ã –∏ –ø—Ä.
 */
export const postApiUsersIdClearAllInformation = (
  id: number,
  params: PostApiUsersIdClearAllInformationParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Users/${id}/clear-all-information`, method: 'POST', params, signal },
    options
  );
};

export const getPostApiUsersIdClearAllInformationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdClearAllInformation>>,
    TError,
    { id: number; params: PostApiUsersIdClearAllInformationParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersIdClearAllInformation>>,
  TError,
  { id: number; params: PostApiUsersIdClearAllInformationParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersIdClearAllInformation>>,
    { id: number; params: PostApiUsersIdClearAllInformationParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return postApiUsersIdClearAllInformation(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersIdClearAllInformationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersIdClearAllInformation>>
>;

export type PostApiUsersIdClearAllInformationMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∑–∞—è–≤–∫–∏, –û–°–ò, —É—Å–ª—É–≥–∏, –∞–±–æ–Ω–µ–Ω—Ç—ã, –ø–ª–∞–Ω—ã –∏ –ø—Ä.
 */
export const usePostApiUsersIdClearAllInformation = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdClearAllInformation>>,
    TError,
    { id: number; params: PostApiUsersIdClearAllInformationParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersIdClearAllInformation>>,
  TError,
  { id: number; params: PostApiUsersIdClearAllInformationParams },
  TContext
> => {
  const mutationOptions = getPostApiUsersIdClearAllInformationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const getApiUsersIdAffiliations = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesUserAffiliation>(
    { url: `/api/Users/${id}/affiliations`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersIdAffiliationsQueryKey = (id: number) => {
  return [`/api/Users/${id}/affiliations`] as const;
};

export const getGetApiUsersIdAffiliationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdAffiliations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdAffiliationsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>> = ({ signal }) =>
    getApiUsersIdAffiliations(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdAffiliations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersIdAffiliationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>>;
export type GetApiUsersIdAffiliationsQueryError = ErrorType<unknown>;

export function useGetApiUsersIdAffiliations<
  TData = Awaited<ReturnType<typeof getApiUsersIdAffiliations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersIdAffiliations<
  TData = Awaited<ReturnType<typeof getApiUsersIdAffiliations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersIdAffiliations<
  TData = Awaited<ReturnType<typeof getApiUsersIdAffiliations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */

export function useGetApiUsersIdAffiliations<
  TData = Awaited<ReturnType<typeof getApiUsersIdAffiliations>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdAffiliations>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersIdAffiliationsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–π
 */
export const getApiUsersActiveChairmans = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbUser>(
    { url: `/api/Users/active-chairmans`, method: 'GET', signal },
    options
  );
};

export const getGetApiUsersActiveChairmansQueryKey = () => {
  return [`/api/Users/active-chairmans`] as const;
};

export const getGetApiUsersActiveChairmansQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersActiveChairmans>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersActiveChairmansQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>> = ({ signal }) =>
    getApiUsersActiveChairmans(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersActiveChairmans>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUsersActiveChairmansQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>>;
export type GetApiUsersActiveChairmansQueryError = ErrorType<unknown>;

export function useGetApiUsersActiveChairmans<
  TData = Awaited<ReturnType<typeof getApiUsersActiveChairmans>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersActiveChairmans<
  TData = Awaited<ReturnType<typeof getApiUsersActiveChairmans>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUsersActiveChairmans<
  TData = Awaited<ReturnType<typeof getApiUsersActiveChairmans>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–π
 */

export function useGetApiUsersActiveChairmans<
  TData = Awaited<ReturnType<typeof getApiUsersActiveChairmans>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersActiveChairmans>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUsersActiveChairmansQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbServiceGroupSaldo,
  RequestsServiceGroupSaldoRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∞–ª—å–¥–æ
 */
export const getApiServiceGroupSaldoId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbServiceGroupSaldo>(
    { url: `/api/ServiceGroupSaldo/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiServiceGroupSaldoIdQueryKey = (id: number) => {
  return [`/api/ServiceGroupSaldo/${id}`] as const;
};

export const getGetApiServiceGroupSaldoIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiServiceGroupSaldoIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>> = ({ signal }) =>
    getApiServiceGroupSaldoId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiServiceGroupSaldoIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>>;
export type GetApiServiceGroupSaldoIdQueryError = ErrorType<unknown>;

export function useGetApiServiceGroupSaldoId<
  TData = Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiServiceGroupSaldoId<
  TData = Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiServiceGroupSaldoId<
  TData = Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∞–ª—å–¥–æ
 */

export function useGetApiServiceGroupSaldoId<
  TData = Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceGroupSaldoId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiServiceGroupSaldoIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å–∞–ª—å–¥–æ
 */
export const putApiServiceGroupSaldoId = (
  id: BodyType<number>,
  putApiServiceGroupSaldoIdBody: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/ServiceGroupSaldo/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: putApiServiceGroupSaldoIdBody
    },
    options
  );
};

export const getPutApiServiceGroupSaldoIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiServiceGroupSaldoId>>,
    TError,
    { id: number; data: BodyType<number> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiServiceGroupSaldoId>>,
  TError,
  { id: number; data: BodyType<number> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiServiceGroupSaldoId>>,
    { id: number; data: BodyType<number> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiServiceGroupSaldoId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiServiceGroupSaldoIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiServiceGroupSaldoId>>
>;
export type PutApiServiceGroupSaldoIdMutationBody = BodyType<number>;
export type PutApiServiceGroupSaldoIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å–∞–ª—å–¥–æ
 */
export const usePutApiServiceGroupSaldoId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiServiceGroupSaldoId>>,
    TError,
    { id: number; data: BodyType<number> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiServiceGroupSaldoId>>,
  TError,
  { id: number; data: BodyType<number> },
  TContext
> => {
  const mutationOptions = getPutApiServiceGroupSaldoIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–ª—å–¥–æ
 */
export const deleteApiServiceGroupSaldoId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/ServiceGroupSaldo/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiServiceGroupSaldoIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiServiceGroupSaldoId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiServiceGroupSaldoId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiServiceGroupSaldoId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteApiServiceGroupSaldoId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiServiceGroupSaldoIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiServiceGroupSaldoId>>
>;

export type DeleteApiServiceGroupSaldoIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–ª—å–¥–æ
 */
export const useDeleteApiServiceGroupSaldoId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiServiceGroupSaldoId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiServiceGroupSaldoId>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteApiServiceGroupSaldoIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å–∞–ª—å–¥–æ
 */
export const postApiServiceGroupSaldo = (
  requestsServiceGroupSaldoRequest: BodyType<RequestsServiceGroupSaldoRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbServiceGroupSaldo>(
    {
      url: `/api/ServiceGroupSaldo`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsServiceGroupSaldoRequest,
      signal
    },
    options
  );
};

export const getPostApiServiceGroupSaldoMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiServiceGroupSaldo>>,
    TError,
    { data: BodyType<RequestsServiceGroupSaldoRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiServiceGroupSaldo>>,
  TError,
  { data: BodyType<RequestsServiceGroupSaldoRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiServiceGroupSaldo>>,
    { data: BodyType<RequestsServiceGroupSaldoRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiServiceGroupSaldo(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiServiceGroupSaldoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiServiceGroupSaldo>>>;
export type PostApiServiceGroupSaldoMutationBody = BodyType<RequestsServiceGroupSaldoRequest>;
export type PostApiServiceGroupSaldoMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å–∞–ª—å–¥–æ
 */
export const usePostApiServiceGroupSaldo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiServiceGroupSaldo>>,
    TError,
    { data: BodyType<RequestsServiceGroupSaldoRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiServiceGroupSaldo>>,
  TError,
  { data: BodyType<RequestsServiceGroupSaldoRequest> },
  TContext
> => {
  const mutationOptions = getPostApiServiceGroupSaldoMutationOptions(options);

  return useMutation(mutationOptions);
};

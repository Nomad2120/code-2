/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbActDoc,
  ApiResponse1OSICoreModelsResponsesActResponse,
  ApiResponse1OSICoreModelsResponsesEsfUploadResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbActDoc,
  PutApiActsIdSignParams,
  RequestsAddScanDoc
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞
 */
export const getApiActsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesActResponse>(
    { url: `/api/Acts/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiActsIdQueryKey = (id: number) => {
  return [`/api/Acts/${id}`] as const;
};

export const getGetApiActsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiActsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiActsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiActsId>>> = ({ signal }) =>
    getApiActsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiActsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiActsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiActsId>>>;
export type GetApiActsIdQueryError = ErrorType<unknown>;

export function useGetApiActsId<TData = Awaited<ReturnType<typeof getApiActsId>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiActsId<TData = Awaited<ReturnType<typeof getApiActsId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiActsId<TData = Awaited<ReturnType<typeof getApiActsId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞
 */

export function useGetApiActsId<TData = Awaited<ReturnType<typeof getApiActsId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiActsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –∞–∫—Ç—É
 */
export const postApiActsIdDocs = (
  id: number,
  requestsAddScanDoc: BodyType<RequestsAddScanDoc>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbActDoc>(
    {
      url: `/api/Acts/${id}/docs`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAddScanDoc,
      signal
    },
    options
  );
};

export const getPostApiActsIdDocsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiActsIdDocs>>,
    TError,
    { id: number; data: BodyType<RequestsAddScanDoc> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiActsIdDocs>>,
  TError,
  { id: number; data: BodyType<RequestsAddScanDoc> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiActsIdDocs>>,
    { id: number; data: BodyType<RequestsAddScanDoc> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiActsIdDocs(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiActsIdDocsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiActsIdDocs>>>;
export type PostApiActsIdDocsMutationBody = BodyType<RequestsAddScanDoc>;
export type PostApiActsIdDocsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –∞–∫—Ç—É
 */
export const usePostApiActsIdDocs = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiActsIdDocs>>,
    TError,
    { id: number; data: BodyType<RequestsAddScanDoc> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiActsIdDocs>>,
  TError,
  { id: number; data: BodyType<RequestsAddScanDoc> },
  TContext
> => {
  const mutationOptions = getPostApiActsIdDocsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∞–∫—Ç—É
 */
export const getApiActsIdDocs = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbActDoc>(
    { url: `/api/Acts/${id}/docs`, method: 'GET', signal },
    options
  );
};

export const getGetApiActsIdDocsQueryKey = (id: number) => {
  return [`/api/Acts/${id}/docs`] as const;
};

export const getGetApiActsIdDocsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiActsIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiActsIdDocsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiActsIdDocs>>> = ({ signal }) =>
    getApiActsIdDocs(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiActsIdDocs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiActsIdDocsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiActsIdDocs>>>;
export type GetApiActsIdDocsQueryError = ErrorType<unknown>;

export function useGetApiActsIdDocs<TData = Awaited<ReturnType<typeof getApiActsIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiActsIdDocs<TData = Awaited<ReturnType<typeof getApiActsIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiActsIdDocs<TData = Awaited<ReturnType<typeof getApiActsIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∞–∫—Ç—É
 */

export function useGetApiActsIdDocs<TData = Awaited<ReturnType<typeof getApiActsIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiActsIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiActsIdDocsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É –∞–∫—Ç–∞
 */
export const deleteApiActsIdDocsDocId = (
  id: number,
  docId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Acts/${id}/docs/${docId}`, method: 'DELETE' }, options);
};

export const getDeleteApiActsIdDocsDocIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiActsIdDocsDocId>>,
    TError,
    { id: number; docId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiActsIdDocsDocId>>,
  TError,
  { id: number; docId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiActsIdDocsDocId>>,
    { id: number; docId: number }
  > = (props) => {
    const { id, docId } = props ?? {};

    return deleteApiActsIdDocsDocId(id, docId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiActsIdDocsDocIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiActsIdDocsDocId>>>;

export type DeleteApiActsIdDocsDocIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É –∞–∫—Ç–∞
 */
export const useDeleteApiActsIdDocsDocId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiActsIdDocsDocId>>,
    TError,
    { id: number; docId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiActsIdDocsDocId>>,
  TError,
  { id: number; docId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiActsIdDocsDocIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞
 */
export const putApiActsIdSign = (
  id: number,
  putApiActsIdSignBody: BodyType<string>,
  params: PutApiActsIdSignParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Acts/${id}/sign`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: putApiActsIdSignBody,
      params
    },
    options
  );
};

export const getPutApiActsIdSignMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiActsIdSign>>,
    TError,
    { id: number; data: BodyType<string>; params: PutApiActsIdSignParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiActsIdSign>>,
  TError,
  { id: number; data: BodyType<string>; params: PutApiActsIdSignParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiActsIdSign>>,
    { id: number; data: BodyType<string>; params: PutApiActsIdSignParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiActsIdSign(id, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiActsIdSignMutationResult = NonNullable<Awaited<ReturnType<typeof putApiActsIdSign>>>;
export type PutApiActsIdSignMutationBody = BodyType<string>;
export type PutApiActsIdSignMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞
 */
export const usePutApiActsIdSign = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiActsIdSign>>,
    TError,
    { id: number; data: BodyType<string>; params: PutApiActsIdSignParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiActsIdSign>>,
  TError,
  { id: number; data: BodyType<string>; params: PutApiActsIdSignParams },
  TContext
> => {
  const mutationOptions = getPutApiActsIdSignMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞
 */
export const putApiActsIdUnsign = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Acts/${id}/unsign`, method: 'PUT' }, options);
};

export const getPutApiActsIdUnsignMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiActsIdUnsign>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiActsIdUnsign>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiActsIdUnsign>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return putApiActsIdUnsign(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiActsIdUnsignMutationResult = NonNullable<Awaited<ReturnType<typeof putApiActsIdUnsign>>>;

export type PutApiActsIdUnsignMutationError = ErrorType<unknown>;

/**
 * @summary –£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞
 */
export const usePutApiActsIdUnsign = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiActsIdUnsign>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiActsIdUnsign>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiActsIdUnsignMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É
 */
export const putApiActsIdCreateEsf = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesEsfUploadResponse>(
    { url: `/api/Acts/${id}/create-esf`, method: 'PUT' },
    options
  );
};

export const getPutApiActsIdCreateEsfMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiActsIdCreateEsf>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiActsIdCreateEsf>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiActsIdCreateEsf>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return putApiActsIdCreateEsf(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiActsIdCreateEsfMutationResult = NonNullable<Awaited<ReturnType<typeof putApiActsIdCreateEsf>>>;

export type PutApiActsIdCreateEsfMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É
 */
export const usePutApiActsIdCreateEsf = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiActsIdCreateEsf>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiActsIdCreateEsf>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiActsIdCreateEsfMutationOptions(options);

  return useMutation(mutationOptions);
};

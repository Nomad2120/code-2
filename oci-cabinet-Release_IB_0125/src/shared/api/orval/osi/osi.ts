/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbAbonent,
  ApiResponse1OSICoreModelsDbOsi,
  ApiResponse1OSICoreModelsDbOsiDoc,
  ApiResponse1OSICoreModelsDbPlanAccural,
  ApiResponse1SystemBoolean,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAbonent,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAct,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsi,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiAccount,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiAccountApplication,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiDoc,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiService,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiServiceCompany,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbPlanAccural,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesPastDebtsByOsiResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesServiceGroupResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesServiceGroupSaldoResponse,
  ApiResponse1SystemCollectionsGenericList1OSICoreModelsDbAbonent,
  ApiResponse1SystemObject,
  GetApiOsiIdAbonentsParams,
  RequestsAddScanDoc,
  RequestsOsiRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –û–°–ò
 */
export const getApiOsiAll = (options?: SecondParameter<typeof axiosForReactQueryInstance>, signal?: AbortSignal) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsi>(
    { url: `/api/Osi/all`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiAllQueryKey = () => {
  return [`/api/Osi/all`] as const;
};

export const getGetApiOsiAllQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiAll>>> = ({ signal }) =>
    getApiOsiAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiAllQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiAll>>>;
export type GetApiOsiAllQueryError = ErrorType<unknown>;

export function useGetApiOsiAll<
  TData = Awaited<ReturnType<typeof getApiOsiAll>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiAll<
  TData = Awaited<ReturnType<typeof getApiOsiAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiAll<
  TData = Awaited<ReturnType<typeof getApiOsiAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –û–°–ò
 */

export function useGetApiOsiAll<
  TData = Awaited<ReturnType<typeof getApiOsiAll>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAll>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–°–ò
 */
export const getApiOsiAllActive = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsi>(
    { url: `/api/Osi/all-active`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiAllActiveQueryKey = () => {
  return [`/api/Osi/all-active`] as const;
};

export const getGetApiOsiAllActiveQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiAllActive>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiAllActiveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiAllActive>>> = ({ signal }) =>
    getApiOsiAllActive(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiAllActive>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiAllActiveQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiAllActive>>>;
export type GetApiOsiAllActiveQueryError = ErrorType<unknown>;

export function useGetApiOsiAllActive<
  TData = Awaited<ReturnType<typeof getApiOsiAllActive>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiAllActive<
  TData = Awaited<ReturnType<typeof getApiOsiAllActive>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>, 'initialData'>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiAllActive<
  TData = Awaited<ReturnType<typeof getApiOsiAllActive>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–°–ò
 */

export function useGetApiOsiAllActive<
  TData = Awaited<ReturnType<typeof getApiOsiAllActive>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAllActive>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiAllActiveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –û–°–ò
 */
export const getApiOsiId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsi>(
    { url: `/api/Osi/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdQueryKey = (id: number) => {
  return [`/api/Osi/${id}`] as const;
};

export const getGetApiOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiId>>> = ({ signal }) =>
    getApiOsiId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiId>>>;
export type GetApiOsiIdQueryError = ErrorType<unknown>;

export function useGetApiOsiId<TData = Awaited<ReturnType<typeof getApiOsiId>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiId<TData = Awaited<ReturnType<typeof getApiOsiId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiId<TData = Awaited<ReturnType<typeof getApiOsiId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –û–°–ò
 */

export function useGetApiOsiId<TData = Awaited<ReturnType<typeof getApiOsiId>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –û–°–ò
 */
export const putApiOsiId = (
  id: number,
  requestsOsiRequest: BodyType<RequestsOsiRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Osi/${id}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: requestsOsiRequest },
    options
  );
};

export const getPutApiOsiIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiId>>,
    { id: number; data: BodyType<RequestsOsiRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOsiId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiId>>>;
export type PutApiOsiIdMutationBody = BodyType<RequestsOsiRequest>;
export type PutApiOsiIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–µ–Ω–∏–µ –û–°–ò
 */
export const usePutApiOsiId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiRequest> },
  TContext
> => {
  const mutationOptions = getPutApiOsiIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –û–°–ò –≤ —Ä–∞–±–æ—Ç—É (–¥–ª—è –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è)
 */
export const putApiOsiIdStart = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Osi/${id}/start`, method: 'PUT' }, options);
};

export const getPutApiOsiIdStartMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdStart>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdStart>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOsiIdStart>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return putApiOsiIdStart(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiIdStartMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiIdStart>>>;

export type PutApiOsiIdStartMutationError = ErrorType<unknown>;

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –û–°–ò –≤ —Ä–∞–±–æ—Ç—É (–¥–ª—è –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è)
 */
export const usePutApiOsiIdStart = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdStart>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiOsiIdStart>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiOsiIdStartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –û–°–ò (–¥–ª—è –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è)
 */
export const putApiOsiIdStop = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Osi/${id}/stop`, method: 'PUT' }, options);
};

export const getPutApiOsiIdStopMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdStop>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdStop>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOsiIdStop>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return putApiOsiIdStop(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiIdStopMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiIdStop>>>;

export type PutApiOsiIdStopMutationError = ErrorType<unknown>;

/**
 * @summary –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –û–°–ò (–¥–ª—è –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è)
 */
export const usePutApiOsiIdStop = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdStop>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiOsiIdStop>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiOsiIdStopMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –û–°–ò, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –µ–≥–æ —É —Å–µ–±—è
 */
export const putApiOsiIdActivate = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Osi/${id}/activate`, method: 'PUT' }, options);
};

export const getPutApiOsiIdActivateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdActivate>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdActivate>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOsiIdActivate>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return putApiOsiIdActivate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiIdActivateMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiIdActivate>>>;

export type PutApiOsiIdActivateMutationError = ErrorType<unknown>;

/**
 * @summary –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –û–°–ò, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –µ–≥–æ —É —Å–µ–±—è
 */
export const usePutApiOsiIdActivate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdActivate>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiOsiIdActivate>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiOsiIdActivateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –û–°–ò, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –Ω–µ —É–≤–∏–¥–µ–ª –µ–≥–æ —É —Å–µ–±—è
 */
export const putApiOsiIdDeactivate = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Osi/${id}/deactivate`, method: 'PUT' }, options);
};

export const getPutApiOsiIdDeactivateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdDeactivate>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdDeactivate>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOsiIdDeactivate>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return putApiOsiIdDeactivate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiIdDeactivateMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiIdDeactivate>>>;

export type PutApiOsiIdDeactivateMutationError = ErrorType<unknown>;

/**
 * @summary –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –û–°–ò, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –Ω–µ —É–≤–∏–¥–µ–ª –µ–≥–æ —É —Å–µ–±—è
 */
export const usePutApiOsiIdDeactivate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOsiIdDeactivate>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiOsiIdDeactivate>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiOsiIdDeactivateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –û–°–ò
 */
export const postApiOsiIdDocs = (
  id: number,
  requestsAddScanDoc: BodyType<RequestsAddScanDoc>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiDoc>(
    {
      url: `/api/Osi/${id}/docs`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAddScanDoc,
      signal
    },
    options
  );
};

export const getPostApiOsiIdDocsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiIdDocs>>,
    TError,
    { id: number; data: BodyType<RequestsAddScanDoc> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOsiIdDocs>>,
  TError,
  { id: number; data: BodyType<RequestsAddScanDoc> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOsiIdDocs>>,
    { id: number; data: BodyType<RequestsAddScanDoc> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiOsiIdDocs(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOsiIdDocsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOsiIdDocs>>>;
export type PostApiOsiIdDocsMutationBody = BodyType<RequestsAddScanDoc>;
export type PostApiOsiIdDocsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –û–°–ò
 */
export const usePostApiOsiIdDocs = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiIdDocs>>,
    TError,
    { id: number; data: BodyType<RequestsAddScanDoc> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOsiIdDocs>>,
  TError,
  { id: number; data: BodyType<RequestsAddScanDoc> },
  TContext
> => {
  const mutationOptions = getPostApiOsiIdDocsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –û–°–ò
 */
export const getApiOsiIdDocs = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiDoc>(
    { url: `/api/Osi/${id}/docs`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdDocsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/docs`] as const;
};

export const getGetApiOsiIdDocsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdDocs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdDocsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdDocs>>> = ({ signal }) =>
    getApiOsiIdDocs(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdDocs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdDocsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdDocs>>>;
export type GetApiOsiIdDocsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdDocs<TData = Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdDocs<TData = Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdDocs<TData = Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –û–°–ò
 */

export function useGetApiOsiIdDocs<TData = Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdDocs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdDocsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É –û–°–ò
 */
export const deleteApiOsiIdDocsDocId = (
  id: number,
  docId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/Osi/${id}/docs/${docId}`, method: 'DELETE' }, options);
};

export const getDeleteApiOsiIdDocsDocIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiOsiIdDocsDocId>>,
    TError,
    { id: number; docId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiOsiIdDocsDocId>>,
  TError,
  { id: number; docId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiOsiIdDocsDocId>>,
    { id: number; docId: number }
  > = (props) => {
    const { id, docId } = props ?? {};

    return deleteApiOsiIdDocsDocId(id, docId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiOsiIdDocsDocIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiOsiIdDocsDocId>>>;

export type DeleteApiOsiIdDocsDocIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É –û–°–ò
 */
export const useDeleteApiOsiIdDocsDocId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiOsiIdDocsDocId>>,
    TError,
    { id: number; docId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiOsiIdDocsDocId>>,
  TError,
  { id: number; docId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiOsiIdDocsDocIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ê–±–æ–Ω–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdAbonents = (
  id: number,
  params?: GetApiOsiIdAbonentsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAbonent>(
    { url: `/api/Osi/${id}/abonents`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiOsiIdAbonentsQueryKey = (id: number, params?: GetApiOsiIdAbonentsParams) => {
  return [`/api/Osi/${id}/abonents`, ...(params ? [params] : [])] as const;
};

export const getGetApiOsiIdAbonentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  params?: GetApiOsiIdAbonentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdAbonentsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdAbonents>>> = ({ signal }) =>
    getApiOsiIdAbonents(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdAbonents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdAbonentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdAbonents>>>;
export type GetApiOsiIdAbonentsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  params: undefined | GetApiOsiIdAbonentsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  params?: GetApiOsiIdAbonentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  params?: GetApiOsiIdAbonentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ê–±–æ–Ω–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdAbonents<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonents>>,
  TError = ErrorType<unknown>
>(
  id: number,
  params?: GetApiOsiIdAbonentsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonents>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdAbonentsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–º–µ—â–µ–Ω–∏—è
 */
export const getApiOsiIdAbonentsFlat = (
  id: number,
  flat: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAbonent>(
    { url: `/api/Osi/${id}/abonents/${flat}`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdAbonentsFlatQueryKey = (id: number, flat: string) => {
  return [`/api/Osi/${id}/abonents/${flat}`] as const;
};

export const getGetApiOsiIdAbonentsFlatQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>,
  TError = ErrorType<unknown>
>(
  id: number,
  flat: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdAbonentsFlatQueryKey(id, flat);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>> = ({ signal }) =>
    getApiOsiIdAbonentsFlat(id, flat, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(id && flat), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdAbonentsFlatQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>>;
export type GetApiOsiIdAbonentsFlatQueryError = ErrorType<unknown>;

export function useGetApiOsiIdAbonentsFlat<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>,
  TError = ErrorType<unknown>
>(
  id: number,
  flat: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAbonentsFlat<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>,
  TError = ErrorType<unknown>
>(
  id: number,
  flat: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAbonentsFlat<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>,
  TError = ErrorType<unknown>
>(
  id: number,
  flat: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–º–µ—â–µ–Ω–∏—è
 */

export function useGetApiOsiIdAbonentsFlat<
  TData = Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>,
  TError = ErrorType<unknown>
>(
  id: number,
  flat: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAbonentsFlat>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdAbonentsFlatQueryOptions(id, flat, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdAccounts = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiAccount>(
    { url: `/api/Osi/${id}/accounts`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdAccountsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/accounts`] as const;
};

export const getGetApiOsiIdAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdAccountsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdAccounts>>> = ({ signal }) =>
    getApiOsiIdAccounts(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdAccounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdAccountsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdAccounts>>>;
export type GetApiOsiIdAccountsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdAccounts<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAccounts<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAccounts<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdAccounts<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccounts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccounts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdAccountsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdAccountApplications = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiAccountApplication>(
    { url: `/api/Osi/${id}/account-applications`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdAccountApplicationsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/account-applications`] as const;
};

export const getGetApiOsiIdAccountApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdAccountApplicationsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>> = ({ signal }) =>
    getApiOsiIdAccountApplications(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdAccountApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>
>;
export type GetApiOsiIdAccountApplicationsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdAccountApplications<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAccountApplications<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAccountApplications<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdAccountApplications<
  TData = Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAccountApplications>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdAccountApplicationsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–ª–∞–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdPlanAccurals = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbPlanAccural>(
    { url: `/api/Osi/${id}/plan-accurals`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdPlanAccuralsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/plan-accurals`] as const;
};

export const getGetApiOsiIdPlanAccuralsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdPlanAccuralsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>> = ({ signal }) =>
    getApiOsiIdPlanAccurals(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdPlanAccuralsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>>;
export type GetApiOsiIdPlanAccuralsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdPlanAccurals<
  TData = Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdPlanAccurals<
  TData = Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdPlanAccurals<
  TData = Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–ª–∞–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdPlanAccurals<
  TData = Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPlanAccurals>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdPlanAccuralsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
 */
export const getApiOsiIdGetLastPlanOrCreateNew = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbPlanAccural>(
    { url: `/api/Osi/${id}/get-last-plan-or-create-new`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdGetLastPlanOrCreateNewQueryKey = (id: number) => {
  return [`/api/Osi/${id}/get-last-plan-or-create-new`] as const;
};

export const getGetApiOsiIdGetLastPlanOrCreateNewQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdGetLastPlanOrCreateNewQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>> = ({ signal }) =>
    getApiOsiIdGetLastPlanOrCreateNew(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdGetLastPlanOrCreateNewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>
>;
export type GetApiOsiIdGetLastPlanOrCreateNewQueryError = ErrorType<unknown>;

export function useGetApiOsiIdGetLastPlanOrCreateNew<
  TData = Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdGetLastPlanOrCreateNew<
  TData = Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdGetLastPlanOrCreateNew<
  TData = Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
 */

export function useGetApiOsiIdGetLastPlanOrCreateNew<
  TData = Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGetLastPlanOrCreateNew>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdGetLastPlanOrCreateNewQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdServices = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiService>(
    { url: `/api/Osi/${id}/services`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdServicesQueryKey = (id: number) => {
  return [`/api/Osi/${id}/services`] as const;
};

export const getGetApiOsiIdServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdServices>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdServicesQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdServices>>> = ({ signal }) =>
    getApiOsiIdServices(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdServices>>>;
export type GetApiOsiIdServicesQueryError = ErrorType<unknown>;

export function useGetApiOsiIdServices<
  TData = Awaited<ReturnType<typeof getApiOsiIdServices>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdServices<
  TData = Awaited<ReturnType<typeof getApiOsiIdServices>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdServices<
  TData = Awaited<ReturnType<typeof getApiOsiIdServices>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdServices<
  TData = Awaited<ReturnType<typeof getApiOsiIdServices>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServices>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdServicesQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò —Å –∞–±–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
export const getApiOsiIdV2Services = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesServiceGroupResponse>(
    { url: `/api/Osi/${id}/v2/services`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdV2ServicesQueryKey = (id: number) => {
  return [`/api/Osi/${id}/v2/services`] as const;
};

export const getGetApiOsiIdV2ServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdV2Services>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdV2ServicesQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdV2Services>>> = ({ signal }) =>
    getApiOsiIdV2Services(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdV2Services>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdV2ServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdV2Services>>>;
export type GetApiOsiIdV2ServicesQueryError = ErrorType<unknown>;

export function useGetApiOsiIdV2Services<
  TData = Awaited<ReturnType<typeof getApiOsiIdV2Services>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdV2Services<
  TData = Awaited<ReturnType<typeof getApiOsiIdV2Services>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdV2Services<
  TData = Awaited<ReturnType<typeof getApiOsiIdV2Services>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò —Å –∞–±–æ–Ω–µ–Ω—Ç–∞–º–∏
 */

export function useGetApiOsiIdV2Services<
  TData = Awaited<ReturnType<typeof getApiOsiIdV2Services>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdV2Services>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdV2ServicesQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdServiceCompanies = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbOsiServiceCompany>(
    { url: `/api/Osi/${id}/service-companies`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdServiceCompaniesQueryKey = (id: number) => {
  return [`/api/Osi/${id}/service-companies`] as const;
};

export const getGetApiOsiIdServiceCompaniesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdServiceCompaniesQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>> = ({ signal }) =>
    getApiOsiIdServiceCompanies(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdServiceCompaniesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>
>;
export type GetApiOsiIdServiceCompaniesQueryError = ErrorType<unknown>;

export function useGetApiOsiIdServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdServiceCompanies<
  TData = Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdServiceCompanies>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdServiceCompaniesQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
 */
export const putApiOsiIdWizardStep = (
  id: number,
  putApiOsiIdWizardStepBody: BodyType<string>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/Osi/${id}/wizard-step`,
      method: 'PUT',
      headers: { 'Content-Type': 'text/plain' },
      data: putApiOsiIdWizardStepBody
    },
    options
  );
};

export const getPutApiOsiIdWizardStepMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiIdWizardStep>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiIdWizardStep>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiIdWizardStep>>,
    { id: number; data: BodyType<string> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOsiIdWizardStep(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiIdWizardStepMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiIdWizardStep>>>;
export type PutApiOsiIdWizardStepMutationBody = BodyType<string>;
export type PutApiOsiIdWizardStepMutationError = ErrorType<unknown>;

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–≥ –≤–∏–∑–∞—Ä–¥–∞
 */
export const usePutApiOsiIdWizardStep = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiIdWizardStep>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiIdWizardStep>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPutApiOsiIdWizardStepMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤ –ø–æ –û–°–ò
 */
export const getApiOsiIdNotSignedActs = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAct>(
    { url: `/api/Osi/${id}/not-signed-acts`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdNotSignedActsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/not-signed-acts`] as const;
};

export const getGetApiOsiIdNotSignedActsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdNotSignedActsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>> = ({ signal }) =>
    getApiOsiIdNotSignedActs(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdNotSignedActsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>>;
export type GetApiOsiIdNotSignedActsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdNotSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdNotSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdNotSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤ –ø–æ –û–°–ò
 */

export function useGetApiOsiIdNotSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdNotSignedActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdNotSignedActsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤ –ø–æ –û–°–ò
 */
export const getApiOsiIdSignedActs = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAct>(
    { url: `/api/Osi/${id}/signed-acts`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdSignedActsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/signed-acts`] as const;
};

export const getGetApiOsiIdSignedActsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdSignedActsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>> = ({ signal }) =>
    getApiOsiIdSignedActs(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdSignedActs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdSignedActsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>>;
export type GetApiOsiIdSignedActsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤ –ø–æ –û–°–ò
 */

export function useGetApiOsiIdSignedActs<
  TData = Awaited<ReturnType<typeof getApiOsiIdSignedActs>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSignedActs>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdSignedActsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∞–ª—å–¥–æ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º —É—Å–ª—É–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */
export const getApiOsiIdSaldoByGroups = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesServiceGroupSaldoResponse>(
    { url: `/api/Osi/${id}/saldo-by-groups`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdSaldoByGroupsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/saldo-by-groups`] as const;
};

export const getGetApiOsiIdSaldoByGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdSaldoByGroupsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>> = ({ signal }) =>
    getApiOsiIdSaldoByGroups(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdSaldoByGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>>;
export type GetApiOsiIdSaldoByGroupsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdSaldoByGroups<
  TData = Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdSaldoByGroups<
  TData = Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdSaldoByGroups<
  TData = Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∞–ª—å–¥–æ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º —É—Å–ª—É–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –û–°–ò
 */

export function useGetApiOsiIdSaldoByGroups<
  TData = Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdSaldoByGroups>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdSaldoByGroupsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –û–°–ò
 */
export const getApiOsiIdPastDebts = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesPastDebtsByOsiResponse>(
    { url: `/api/Osi/${id}/past-debts`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdPastDebtsQueryKey = (id: number) => {
  return [`/api/Osi/${id}/past-debts`] as const;
};

export const getGetApiOsiIdPastDebtsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdPastDebts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdPastDebtsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>> = ({ signal }) =>
    getApiOsiIdPastDebts(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdPastDebts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdPastDebtsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>>;
export type GetApiOsiIdPastDebtsQueryError = ErrorType<unknown>;

export function useGetApiOsiIdPastDebts<
  TData = Awaited<ReturnType<typeof getApiOsiIdPastDebts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdPastDebts<
  TData = Awaited<ReturnType<typeof getApiOsiIdPastDebts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdPastDebts<
  TData = Awaited<ReturnType<typeof getApiOsiIdPastDebts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –û–°–ò
 */

export function useGetApiOsiIdPastDebts<
  TData = Awaited<ReturnType<typeof getApiOsiIdPastDebts>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdPastDebts>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdPastDebtsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –í—ã–¥–∞–µ—Ç –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—ã–ª–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–º –û–°–ò, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
 */
export const getApiOsiIdGroupAndServicesForFixes = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemObject>(
    { url: `/api/Osi/${id}/group-and-services-for-fixes`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdGroupAndServicesForFixesQueryKey = (id: number) => {
  return [`/api/Osi/${id}/group-and-services-for-fixes`] as const;
};

export const getGetApiOsiIdGroupAndServicesForFixesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdGroupAndServicesForFixesQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>> = ({ signal }) =>
    getApiOsiIdGroupAndServicesForFixes(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdGroupAndServicesForFixesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>
>;
export type GetApiOsiIdGroupAndServicesForFixesQueryError = ErrorType<unknown>;

export function useGetApiOsiIdGroupAndServicesForFixes<
  TData = Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdGroupAndServicesForFixes<
  TData = Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdGroupAndServicesForFixes<
  TData = Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –í—ã–¥–∞–µ—Ç –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—ã–ª–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–º –û–°–ò, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
 */

export function useGetApiOsiIdGroupAndServicesForFixes<
  TData = Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdGroupAndServicesForFixes>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdGroupAndServicesForFixesQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ñ–µ—Ä—Ç—ã
 */
export const getApiOsiIdIsNeedSignNewOffer = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemBoolean>(
    { url: `/api/Osi/${id}/is-need-sign-new-offer`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdIsNeedSignNewOfferQueryKey = (id: number) => {
  return [`/api/Osi/${id}/is-need-sign-new-offer`] as const;
};

export const getGetApiOsiIdIsNeedSignNewOfferQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdIsNeedSignNewOfferQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>> = ({ signal }) =>
    getApiOsiIdIsNeedSignNewOffer(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdIsNeedSignNewOfferQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>
>;
export type GetApiOsiIdIsNeedSignNewOfferQueryError = ErrorType<unknown>;

export function useGetApiOsiIdIsNeedSignNewOffer<
  TData = Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdIsNeedSignNewOffer<
  TData = Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdIsNeedSignNewOffer<
  TData = Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ñ–µ—Ä—Ç—ã
 */

export function useGetApiOsiIdIsNeedSignNewOffer<
  TData = Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdIsNeedSignNewOffer>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdIsNeedSignNewOfferQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ñ–µ—Ä—Ç—ã
 */
export const getApiOsiIdAddInPromo = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Osi/${id}/add-in-promo`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiIdAddInPromoQueryKey = (id: number) => {
  return [`/api/Osi/${id}/add-in-promo`] as const;
};

export const getGetApiOsiIdAddInPromoQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiIdAddInPromoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>> = ({ signal }) =>
    getApiOsiIdAddInPromo(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiIdAddInPromoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>>;
export type GetApiOsiIdAddInPromoQueryError = ErrorType<unknown>;

export function useGetApiOsiIdAddInPromo<
  TData = Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAddInPromo<
  TData = Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiIdAddInPromo<
  TData = Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ñ–µ—Ä—Ç—ã
 */

export function useGetApiOsiIdAddInPromo<
  TData = Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiIdAddInPromo>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiIdAddInPromoQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞
 */
export const postApiOsiIdLoadAbonentsFromExcel = (
  id: number,
  postApiOsiIdLoadAbonentsFromExcelBody: BodyType<string>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericList1OSICoreModelsDbAbonent>(
    {
      url: `/api/Osi/${id}/load-abonents-from-excel`,
      method: 'POST',
      headers: { 'Content-Type': 'application/octet-stream' },
      data: postApiOsiIdLoadAbonentsFromExcelBody,
      signal
    },
    options
  );
};

export const getPostApiOsiIdLoadAbonentsFromExcelMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiIdLoadAbonentsFromExcel>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOsiIdLoadAbonentsFromExcel>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOsiIdLoadAbonentsFromExcel>>,
    { id: number; data: BodyType<string> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiOsiIdLoadAbonentsFromExcel(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOsiIdLoadAbonentsFromExcelMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOsiIdLoadAbonentsFromExcel>>
>;
export type PostApiOsiIdLoadAbonentsFromExcelMutationBody = BodyType<string>;
export type PostApiOsiIdLoadAbonentsFromExcelMutationError = ErrorType<unknown>;

/**
 * @summary –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª–∞
 */
export const usePostApiOsiIdLoadAbonentsFromExcel = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiIdLoadAbonentsFromExcel>>,
    TError,
    { id: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOsiIdLoadAbonentsFromExcel>>,
  TError,
  { id: number; data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPostApiOsiIdLoadAbonentsFromExcelMutationOptions(options);

  return useMutation(mutationOptions);
};

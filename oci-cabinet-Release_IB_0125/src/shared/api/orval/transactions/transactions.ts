/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsReportsOSV,
  ApiResponse1OSICoreModelsReportsOSVAbonent,
  ApiResponse1OSICoreModelsResponsesCreatePaymentResponse,
  ApiResponse1OSICoreModelsResponsesEndSaldoResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsReportsSaldoOnAllPeriodSaldoPeriod,
  ApiResponse1SystemCollectionsGenericList1OSICoreModelsReportsAccuralsByAbonentAndServicesGroup,
  ApiResponse1SystemCollectionsGenericList1OSICoreModelsReportsFixTransaction,
  ApiResponse1SystemCollectionsGenericList1OSICoreModelsReportsPaymentTransaction,
  ApiResponse1SystemInt32,
  GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  GetApiTransactionsFixesOsiIdParams,
  GetApiTransactionsOsvForDebtorsOsiIdParams,
  GetApiTransactionsOsvOsiIdParams,
  GetApiTransactionsPaymentsOsiIdParams,
  GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  PostApiTransactionsFineParams,
  PostApiTransactionsFixInternalParams,
  PostApiTransactionsPaymentInternalParams,
  PostApiTransactionsPaymentParams,
  RequestsCreateFixRequest,
  RequestsCreatePaymentInternalRequest,
  RequestsCreatePaymentRequest
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∞–ª—å–¥–æ –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É
 */
export const getApiTransactionsSaldoAbonentId = (
  abonentId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesEndSaldoResponse>(
    { url: `/api/Transactions/saldo/${abonentId}`, method: 'GET', signal },
    options
  );
};

export const getGetApiTransactionsSaldoAbonentIdQueryKey = (abonentId: number) => {
  return [`/api/Transactions/saldo/${abonentId}`] as const;
};

export const getGetApiTransactionsSaldoAbonentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsSaldoAbonentIdQueryKey(abonentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>> = ({ signal }) =>
    getApiTransactionsSaldoAbonentId(abonentId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsSaldoAbonentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>
>;
export type GetApiTransactionsSaldoAbonentIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsSaldoAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsSaldoAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsSaldoAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∞–ª—å–¥–æ –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É
 */

export function useGetApiTransactionsSaldoAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoAbonentId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsSaldoAbonentIdQueryOptions(abonentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∞–ª—å–¥–æ –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiTransactionsSaldoOnPeriodAbonentId = (
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsReportsOSVAbonent>(
    { url: `/api/Transactions/saldo-on-period/${abonentId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiTransactionsSaldoOnPeriodAbonentIdQueryKey = (
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams
) => {
  return [`/api/Transactions/saldo-on-period/${abonentId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsSaldoOnPeriodAbonentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsSaldoOnPeriodAbonentIdQueryKey(abonentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>> = ({ signal }) =>
    getApiTransactionsSaldoOnPeriodAbonentId(abonentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsSaldoOnPeriodAbonentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>
>;
export type GetApiTransactionsSaldoOnPeriodAbonentIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsSaldoOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsSaldoOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsSaldoOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∞–ª—å–¥–æ –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiTransactionsSaldoOnPeriodAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsSaldoOnPeriodAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnPeriodAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsSaldoOnPeriodAbonentIdQueryOptions(abonentId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∞–ª—å–¥–æ –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
 */
export const getApiTransactionsSaldoOnAllPeriodsAbonentId = (
  abonentId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsReportsSaldoOnAllPeriodSaldoPeriod>(
    { url: `/api/Transactions/saldo-on-all-periods/${abonentId}`, method: 'GET', signal },
    options
  );
};

export const getGetApiTransactionsSaldoOnAllPeriodsAbonentIdQueryKey = (abonentId: number) => {
  return [`/api/Transactions/saldo-on-all-periods/${abonentId}`] as const;
};

export const getGetApiTransactionsSaldoOnAllPeriodsAbonentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsSaldoOnAllPeriodsAbonentIdQueryKey(abonentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>> = ({
    signal
  }) => getApiTransactionsSaldoOnAllPeriodsAbonentId(abonentId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsSaldoOnAllPeriodsAbonentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>
>;
export type GetApiTransactionsSaldoOnAllPeriodsAbonentIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsSaldoOnAllPeriodsAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsSaldoOnAllPeriodsAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsSaldoOnAllPeriodsAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–∞–ª—å–¥–æ –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É –∑–∞ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
 */

export function useGetApiTransactionsSaldoOnAllPeriodsAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsSaldoOnAllPeriodsAbonentId>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsSaldoOnAllPeriodsAbonentIdQueryOptions(abonentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiTransactionsOsvOsiId = (
  osiId: number,
  params: GetApiTransactionsOsvOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsReportsOSV>(
    { url: `/api/Transactions/osv/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiTransactionsOsvOsiIdQueryKey = (osiId: number, params: GetApiTransactionsOsvOsiIdParams) => {
  return [`/api/Transactions/osv/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsOsvOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsOsvOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>> = ({ signal }) =>
    getApiTransactionsOsvOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsOsvOsiIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>>;
export type GetApiTransactionsOsvOsiIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsOsvOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsOsvOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsOsvOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiTransactionsOsvOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsOsvOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ "–î–æ–ª–∂–Ω–∏–∫–∏"
 */
export const getApiTransactionsOsvForDebtorsOsiId = (
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsReportsOSV>(
    { url: `/api/Transactions/osv-for-debtors/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiTransactionsOsvForDebtorsOsiIdQueryKey = (
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams
) => {
  return [`/api/Transactions/osv-for-debtors/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsOsvForDebtorsOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsOsvForDebtorsOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>> = ({ signal }) =>
    getApiTransactionsOsvForDebtorsOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsOsvForDebtorsOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>
>;
export type GetApiTransactionsOsvForDebtorsOsiIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsOsvForDebtorsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsOsvForDebtorsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsOsvForDebtorsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ "–î–æ–ª–∂–Ω–∏–∫–∏"
 */

export function useGetApiTransactionsOsvForDebtorsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsOsvForDebtorsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvForDebtorsOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsOsvForDebtorsOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 1 –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
 */
export const getApiTransactionsOsvCurrentMonthOsiId = (
  osiId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsReportsOSV>(
    { url: `/api/Transactions/osv-current-month/${osiId}`, method: 'GET', signal },
    options
  );
};

export const getGetApiTransactionsOsvCurrentMonthOsiIdQueryKey = (osiId: number) => {
  return [`/api/Transactions/osv-current-month/${osiId}`] as const;
};

export const getGetApiTransactionsOsvCurrentMonthOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsOsvCurrentMonthOsiIdQueryKey(osiId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>> = ({ signal }) =>
    getApiTransactionsOsvCurrentMonthOsiId(osiId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsOsvCurrentMonthOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>
>;
export type GetApiTransactionsOsvCurrentMonthOsiIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsOsvCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsOsvCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsOsvCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 1 –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
 */

export function useGetApiTransactionsOsvCurrentMonthOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsOsvCurrentMonthOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsOsvCurrentMonthOsiIdQueryOptions(osiId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–ª–∞—Ç–µ–∂–∏ –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiTransactionsPaymentsOsiId = (
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericList1OSICoreModelsReportsPaymentTransaction>(
    { url: `/api/Transactions/payments/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiTransactionsPaymentsOsiIdQueryKey = (
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams
) => {
  return [`/api/Transactions/payments/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsPaymentsOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsPaymentsOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>> = ({ signal }) =>
    getApiTransactionsPaymentsOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsPaymentsOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>
>;
export type GetApiTransactionsPaymentsOsiIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsPaymentsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsPaymentsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsPaymentsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–ª–∞—Ç–µ–∂–∏ –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiTransactionsPaymentsOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsPaymentsOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsPaymentsOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsPaymentsOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiTransactionsFixesOsiId = (
  osiId: number,
  params: GetApiTransactionsFixesOsiIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericList1OSICoreModelsReportsFixTransaction>(
    { url: `/api/Transactions/fixes/${osiId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiTransactionsFixesOsiIdQueryKey = (osiId: number, params: GetApiTransactionsFixesOsiIdParams) => {
  return [`/api/Transactions/fixes/${osiId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsFixesOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsFixesOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsFixesOsiIdQueryKey(osiId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>> = ({ signal }) =>
    getApiTransactionsFixesOsiId(osiId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsFixesOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>
>;
export type GetApiTransactionsFixesOsiIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsFixesOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsFixesOsiIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsFixesOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsFixesOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsFixesOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsFixesOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º –û–°–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiTransactionsFixesOsiId<
  TData = Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  params: GetApiTransactionsFixesOsiIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTransactionsFixesOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsFixesOsiIdQueryOptions(osiId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
 */
export const postApiTransactionsPayment = (
  requestsCreatePaymentRequest: BodyType<RequestsCreatePaymentRequest>,
  params: PostApiTransactionsPaymentParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesCreatePaymentResponse>(
    {
      url: `/api/Transactions/payment`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsCreatePaymentRequest,
      params,
      signal
    },
    options
  );
};

export const getPostApiTransactionsPaymentMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsPayment>>,
    TError,
    { data: BodyType<RequestsCreatePaymentRequest>; params: PostApiTransactionsPaymentParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTransactionsPayment>>,
  TError,
  { data: BodyType<RequestsCreatePaymentRequest>; params: PostApiTransactionsPaymentParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTransactionsPayment>>,
    { data: BodyType<RequestsCreatePaymentRequest>; params: PostApiTransactionsPaymentParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiTransactionsPayment(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTransactionsPaymentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTransactionsPayment>>
>;
export type PostApiTransactionsPaymentMutationBody = BodyType<RequestsCreatePaymentRequest>;
export type PostApiTransactionsPaymentMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
 */
export const usePostApiTransactionsPayment = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsPayment>>,
    TError,
    { data: BodyType<RequestsCreatePaymentRequest>; params: PostApiTransactionsPaymentParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTransactionsPayment>>,
  TError,
  { data: BodyType<RequestsCreatePaymentRequest>; params: PostApiTransactionsPaymentParams },
  TContext
> => {
  const mutationOptions = getPostApiTransactionsPaymentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
 */
export const postApiTransactionsPaymentInternal = (
  requestsCreatePaymentInternalRequest: BodyType<RequestsCreatePaymentInternalRequest>,
  params: PostApiTransactionsPaymentInternalParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemInt32>(
    {
      url: `/api/Transactions/payment/internal`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsCreatePaymentInternalRequest,
      params,
      signal
    },
    options
  );
};

export const getPostApiTransactionsPaymentInternalMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsPaymentInternal>>,
    TError,
    { data: BodyType<RequestsCreatePaymentInternalRequest>; params: PostApiTransactionsPaymentInternalParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTransactionsPaymentInternal>>,
  TError,
  { data: BodyType<RequestsCreatePaymentInternalRequest>; params: PostApiTransactionsPaymentInternalParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTransactionsPaymentInternal>>,
    { data: BodyType<RequestsCreatePaymentInternalRequest>; params: PostApiTransactionsPaymentInternalParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiTransactionsPaymentInternal(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTransactionsPaymentInternalMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTransactionsPaymentInternal>>
>;
export type PostApiTransactionsPaymentInternalMutationBody = BodyType<RequestsCreatePaymentInternalRequest>;
export type PostApiTransactionsPaymentInternalMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
 */
export const usePostApiTransactionsPaymentInternal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsPaymentInternal>>,
    TError,
    { data: BodyType<RequestsCreatePaymentInternalRequest>; params: PostApiTransactionsPaymentInternalParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTransactionsPaymentInternal>>,
  TError,
  { data: BodyType<RequestsCreatePaymentInternalRequest>; params: PostApiTransactionsPaymentInternalParams },
  TContext
> => {
  const mutationOptions = getPostApiTransactionsPaymentInternalMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
 */
export const postApiTransactionsFixInternal = (
  requestsCreateFixRequest: BodyType<RequestsCreateFixRequest>,
  params: PostApiTransactionsFixInternalParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemInt32>(
    {
      url: `/api/Transactions/fix/internal`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsCreateFixRequest,
      params,
      signal
    },
    options
  );
};

export const getPostApiTransactionsFixInternalMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsFixInternal>>,
    TError,
    { data: BodyType<RequestsCreateFixRequest>; params: PostApiTransactionsFixInternalParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTransactionsFixInternal>>,
  TError,
  { data: BodyType<RequestsCreateFixRequest>; params: PostApiTransactionsFixInternalParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTransactionsFixInternal>>,
    { data: BodyType<RequestsCreateFixRequest>; params: PostApiTransactionsFixInternalParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiTransactionsFixInternal(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTransactionsFixInternalMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTransactionsFixInternal>>
>;
export type PostApiTransactionsFixInternalMutationBody = BodyType<RequestsCreateFixRequest>;
export type PostApiTransactionsFixInternalMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
 */
export const usePostApiTransactionsFixInternal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsFixInternal>>,
    TError,
    { data: BodyType<RequestsCreateFixRequest>; params: PostApiTransactionsFixInternalParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTransactionsFixInternal>>,
  TError,
  { data: BodyType<RequestsCreateFixRequest>; params: PostApiTransactionsFixInternalParams },
  TContext
> => {
  const mutationOptions = getPostApiTransactionsFixInternalMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–µ–Ω—é
 */
export const postApiTransactionsFine = (
  params: PostApiTransactionsFineParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Transactions/fine`, method: 'POST', params, signal },
    options
  );
};

export const getPostApiTransactionsFineMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsFine>>,
    TError,
    { params: PostApiTransactionsFineParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTransactionsFine>>,
  TError,
  { params: PostApiTransactionsFineParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTransactionsFine>>,
    { params: PostApiTransactionsFineParams }
  > = (props) => {
    const { params } = props ?? {};

    return postApiTransactionsFine(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTransactionsFineMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTransactionsFine>>>;

export type PostApiTransactionsFineMutationError = ErrorType<unknown>;

/**
 * @summary –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–µ–Ω—é
 */
export const usePostApiTransactionsFine = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTransactionsFine>>,
    TError,
    { params: PostApiTransactionsFineParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTransactionsFine>>,
  TError,
  { params: PostApiTransactionsFineParams },
  TContext
> => {
  const mutationOptions = getPostApiTransactionsFineMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û—Ç—á–µ—Ç –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º –∞–±–æ–Ω–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export const getApiTransactionsAccuralsByAbonentAndServicesAbonentId = (
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericList1OSICoreModelsReportsAccuralsByAbonentAndServicesGroup>(
    { url: `/api/Transactions/accurals-by-abonent-and-services/${abonentId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiTransactionsAccuralsByAbonentAndServicesAbonentIdQueryKey = (
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams
) => {
  return [`/api/Transactions/accurals-by-abonent-and-services/${abonentId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTransactionsAccuralsByAbonentAndServicesAbonentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiTransactionsAccuralsByAbonentAndServicesAbonentIdQueryKey(abonentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>> = ({
    signal
  }) => getApiTransactionsAccuralsByAbonentAndServicesAbonentId(abonentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!abonentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>
>;
export type GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdQueryError = ErrorType<unknown>;

export function useGetApiTransactionsAccuralsByAbonentAndServicesAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsAccuralsByAbonentAndServicesAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiTransactionsAccuralsByAbonentAndServicesAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –û—Ç—á–µ—Ç –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º –∞–±–æ–Ω–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */

export function useGetApiTransactionsAccuralsByAbonentAndServicesAbonentId<
  TData = Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
  TError = ErrorType<unknown>
>(
  abonentId: number,
  params: GetApiTransactionsAccuralsByAbonentAndServicesAbonentIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactionsAccuralsByAbonentAndServicesAbonentId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiTransactionsAccuralsByAbonentAndServicesAbonentIdQueryOptions(
    abonentId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

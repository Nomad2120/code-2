/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type { ApiResponse, ApiResponse1OSICoreModelsDbOsiAccount, RequestsOsiAccountRequest } from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É
 */
export const getApiOsiAccountsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiAccount>(
    { url: `/api/OsiAccounts/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiOsiAccountsIdQueryKey = (id: number) => {
  return [`/api/OsiAccounts/${id}`] as const;
};

export const getGetApiOsiAccountsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOsiAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOsiAccountsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOsiAccountsId>>> = ({ signal }) =>
    getApiOsiAccountsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOsiAccountsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiOsiAccountsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOsiAccountsId>>>;
export type GetApiOsiAccountsIdQueryError = ErrorType<unknown>;

export function useGetApiOsiAccountsId<
  TData = Awaited<ReturnType<typeof getApiOsiAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiAccountsId<
  TData = Awaited<ReturnType<typeof getApiOsiAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiOsiAccountsId<
  TData = Awaited<ReturnType<typeof getApiOsiAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É
 */

export function useGetApiOsiAccountsId<
  TData = Awaited<ReturnType<typeof getApiOsiAccountsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOsiAccountsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiOsiAccountsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç
 */
export const putApiOsiAccountsId = (
  id: number,
  requestsOsiAccountRequest: BodyType<RequestsOsiAccountRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/OsiAccounts/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsOsiAccountRequest
    },
    options
  );
};

export const getPutApiOsiAccountsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiAccountsId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOsiAccountsId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOsiAccountsId>>,
    { id: number; data: BodyType<RequestsOsiAccountRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOsiAccountsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOsiAccountsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOsiAccountsId>>>;
export type PutApiOsiAccountsIdMutationBody = BodyType<RequestsOsiAccountRequest>;
export type PutApiOsiAccountsIdMutationError = ErrorType<unknown>;

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç
 */
export const usePutApiOsiAccountsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOsiAccountsId>>,
    TError,
    { id: number; data: BodyType<RequestsOsiAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOsiAccountsId>>,
  TError,
  { id: number; data: BodyType<RequestsOsiAccountRequest> },
  TContext
> => {
  const mutationOptions = getPutApiOsiAccountsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
 */
export const deleteApiOsiAccountsId = (id: number, options?: SecondParameter<typeof axiosForReactQueryInstance>) => {
  return axiosForReactQueryInstance<ApiResponse>({ url: `/api/OsiAccounts/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiOsiAccountsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiOsiAccountsId>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiOsiAccountsId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiOsiAccountsId>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteApiOsiAccountsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiOsiAccountsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiOsiAccountsId>>>;

export type DeleteApiOsiAccountsIdMutationError = ErrorType<unknown>;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
 */
export const useDeleteApiOsiAccountsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiOsiAccountsId>>, TError, { id: number }, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteApiOsiAccountsId>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteApiOsiAccountsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
 */
export const postApiOsiAccounts = (
  requestsOsiAccountRequest: BodyType<RequestsOsiAccountRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbOsiAccount>(
    {
      url: `/api/OsiAccounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsOsiAccountRequest,
      signal
    },
    options
  );
};

export const getPostApiOsiAccountsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiAccounts>>,
    TError,
    { data: BodyType<RequestsOsiAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOsiAccounts>>,
  TError,
  { data: BodyType<RequestsOsiAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOsiAccounts>>,
    { data: BodyType<RequestsOsiAccountRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOsiAccounts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOsiAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOsiAccounts>>>;
export type PostApiOsiAccountsMutationBody = BodyType<RequestsOsiAccountRequest>;
export type PostApiOsiAccountsMutationError = ErrorType<unknown>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
 */
export const usePostApiOsiAccounts = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOsiAccounts>>,
    TError,
    { data: BodyType<RequestsOsiAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOsiAccounts>>,
  TError,
  { data: BodyType<RequestsOsiAccountRequest> },
  TContext
> => {
  const mutationOptions = getPostApiOsiAccountsMutationOptions(options);

  return useMutation(mutationOptions);
};

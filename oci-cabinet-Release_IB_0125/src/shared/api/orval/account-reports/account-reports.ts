/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbAccountReport,
  ApiResponse1OSICoreModelsDbAccountReportList,
  ApiResponse1OSICoreModelsResponsesAccountReportFormData,
  ApiResponse1OSICoreModelsResponsesAccountReportStatusResponse,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAccountReport,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsRequestsAccountReportUpdateListDetailsItem,
  ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesAccountReportCategoryResponse,
  RequestsAccountReportPublishRequest,
  RequestsAccountReportRequest,
  RequestsAccountReportUpdateListDetailsItem
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType, BodyType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã
 */
export const getApiAccountReportsOsiOsiId = (
  osiId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsDbAccountReport>(
    { url: `/api/AccountReports/osi/${osiId}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAccountReportsOsiOsiIdQueryKey = (osiId: number) => {
  return [`/api/AccountReports/osi/${osiId}`] as const;
};

export const getGetApiAccountReportsOsiOsiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountReportsOsiOsiIdQueryKey(osiId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>> = ({ signal }) =>
    getApiAccountReportsOsiOsiId(osiId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAccountReportsOsiOsiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>
>;
export type GetApiAccountReportsOsiOsiIdQueryError = ErrorType<unknown>;

export function useGetApiAccountReportsOsiOsiId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsOsiOsiId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsOsiOsiId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã
 */

export function useGetApiAccountReportsOsiOsiId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAccountReportsOsiOsiIdQueryOptions(osiId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ –æ—Ç—á–µ—Ç—É –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
 */
export const getApiAccountReportsOsiOsiIdPrevMonthStatus = (
  osiId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesAccountReportStatusResponse>(
    { url: `/api/AccountReports/osi/${osiId}/prev-month-status`, method: 'GET', signal },
    options
  );
};

export const getGetApiAccountReportsOsiOsiIdPrevMonthStatusQueryKey = (osiId: number) => {
  return [`/api/AccountReports/osi/${osiId}/prev-month-status`] as const;
};

export const getGetApiAccountReportsOsiOsiIdPrevMonthStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountReportsOsiOsiIdPrevMonthStatusQueryKey(osiId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>> = ({
    signal
  }) => getApiAccountReportsOsiOsiIdPrevMonthStatus(osiId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!osiId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAccountReportsOsiOsiIdPrevMonthStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>
>;
export type GetApiAccountReportsOsiOsiIdPrevMonthStatusQueryError = ErrorType<unknown>;

export function useGetApiAccountReportsOsiOsiIdPrevMonthStatus<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsOsiOsiIdPrevMonthStatus<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsOsiOsiIdPrevMonthStatus<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ –æ—Ç—á–µ—Ç—É –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
 */

export function useGetApiAccountReportsOsiOsiIdPrevMonthStatus<
  TData = Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>,
  TError = ErrorType<unknown>
>(
  osiId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsOsiOsiIdPrevMonthStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAccountReportsOsiOsiIdPrevMonthStatusQueryOptions(osiId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
 */
export const postApiAccountReports = (
  requestsAccountReportRequest: BodyType<RequestsAccountReportRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAccountReport>(
    {
      url: `/api/AccountReports`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAccountReportRequest,
      signal
    },
    options
  );
};

export const getPostApiAccountReportsMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountReports>>,
    TError,
    { data: BodyType<RequestsAccountReportRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountReports>>,
  TError,
  { data: BodyType<RequestsAccountReportRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountReports>>,
    { data: BodyType<RequestsAccountReportRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAccountReports(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountReportsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountReports>>>;
export type PostApiAccountReportsMutationBody = BodyType<RequestsAccountReportRequest>;
export type PostApiAccountReportsMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
 */
export const usePostApiAccountReports = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountReports>>,
    TError,
    { data: BodyType<RequestsAccountReportRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountReports>>,
  TError,
  { data: BodyType<RequestsAccountReportRequest> },
  TContext
> => {
  const mutationOptions = getPostApiAccountReportsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –ø–æ —Å—á–µ—Ç—É
 */
export const putApiAccountReportsListListId = (
  listId: number,
  putApiAccountReportsListListIdBody: BodyType<string>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/AccountReports/list/${listId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/octet-stream' },
      data: putApiAccountReportsListListIdBody
    },
    options
  );
};

export const getPutApiAccountReportsListListIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountReportsListListId>>,
    TError,
    { listId: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiAccountReportsListListId>>,
  TError,
  { listId: number; data: BodyType<string> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiAccountReportsListListId>>,
    { listId: number; data: BodyType<string> }
  > = (props) => {
    const { listId, data } = props ?? {};

    return putApiAccountReportsListListId(listId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiAccountReportsListListIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiAccountReportsListListId>>
>;
export type PutApiAccountReportsListListIdMutationBody = BodyType<string>;
export type PutApiAccountReportsListListIdMutationError = ErrorType<unknown>;

/**
 * @summary –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –ø–æ —Å—á–µ—Ç—É
 */
export const usePutApiAccountReportsListListId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountReportsListListId>>,
    TError,
    { listId: number; data: BodyType<string> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiAccountReportsListListId>>,
  TError,
  { listId: number; data: BodyType<string> },
  TContext
> => {
  const mutationOptions = getPutApiAccountReportsListListIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ —Å—á–µ—Ç—É
 */
export const getApiAccountReportsListListId = (
  listId: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAccountReportList>(
    { url: `/api/AccountReports/list/${listId}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAccountReportsListListIdQueryKey = (listId: number) => {
  return [`/api/AccountReports/list/${listId}`] as const;
};

export const getGetApiAccountReportsListListIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountReportsListListId>>,
  TError = ErrorType<unknown>
>(
  listId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountReportsListListIdQueryKey(listId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountReportsListListId>>> = ({ signal }) =>
    getApiAccountReportsListListId(listId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!listId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountReportsListListId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAccountReportsListListIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountReportsListListId>>
>;
export type GetApiAccountReportsListListIdQueryError = ErrorType<unknown>;

export function useGetApiAccountReportsListListId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsListListId>>,
  TError = ErrorType<unknown>
>(
  listId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsListListId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsListListId>>,
  TError = ErrorType<unknown>
>(
  listId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsListListId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsListListId>>,
  TError = ErrorType<unknown>
>(
  listId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ —Å—á–µ—Ç—É
 */

export function useGetApiAccountReportsListListId<
  TData = Awaited<ReturnType<typeof getApiAccountReportsListListId>>,
  TError = ErrorType<unknown>
>(
  listId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsListListId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAccountReportsListListIdQueryOptions(listId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
 */
export const postApiAccountReportsListListIdDetails = (
  listId: number,
  requestsAccountReportUpdateListDetailsItem: BodyType<RequestsAccountReportUpdateListDetailsItem[]>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsRequestsAccountReportUpdateListDetailsItem>(
    {
      url: `/api/AccountReports/list/${listId}/details`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAccountReportUpdateListDetailsItem,
      signal
    },
    options
  );
};

export const getPostApiAccountReportsListListIdDetailsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountReportsListListIdDetails>>,
    TError,
    { listId: number; data: BodyType<RequestsAccountReportUpdateListDetailsItem[]> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountReportsListListIdDetails>>,
  TError,
  { listId: number; data: BodyType<RequestsAccountReportUpdateListDetailsItem[]> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountReportsListListIdDetails>>,
    { listId: number; data: BodyType<RequestsAccountReportUpdateListDetailsItem[]> }
  > = (props) => {
    const { listId, data } = props ?? {};

    return postApiAccountReportsListListIdDetails(listId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountReportsListListIdDetailsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountReportsListListIdDetails>>
>;
export type PostApiAccountReportsListListIdDetailsMutationBody = BodyType<RequestsAccountReportUpdateListDetailsItem[]>;
export type PostApiAccountReportsListListIdDetailsMutationError = ErrorType<unknown>;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
 */
export const usePostApiAccountReportsListListIdDetails = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountReportsListListIdDetails>>,
    TError,
    { listId: number; data: BodyType<RequestsAccountReportUpdateListDetailsItem[]> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountReportsListListIdDetails>>,
  TError,
  { listId: number; data: BodyType<RequestsAccountReportUpdateListDetailsItem[]> },
  TContext
> => {
  const mutationOptions = getPostApiAccountReportsListListIdDetailsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
 */
export const putApiAccountReportsId = (
  id: number,
  requestsAccountReportPublishRequest: BodyType<RequestsAccountReportPublishRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    {
      url: `/api/AccountReports/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAccountReportPublishRequest
    },
    options
  );
};

export const getPutApiAccountReportsIdMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountReportsId>>,
    TError,
    { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiAccountReportsId>>,
  TError,
  { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiAccountReportsId>>,
    { id: number; data: BodyType<RequestsAccountReportPublishRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiAccountReportsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiAccountReportsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAccountReportsId>>>;
export type PutApiAccountReportsIdMutationBody = BodyType<RequestsAccountReportPublishRequest>;
export type PutApiAccountReportsIdMutationError = ErrorType<unknown>;

/**
 * @summary –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
 */
export const usePutApiAccountReportsId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiAccountReportsId>>,
    TError,
    { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiAccountReportsId>>,
  TError,
  { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
  TContext
> => {
  const mutationOptions = getPutApiAccountReportsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
 */
export const getApiAccountReportsCategories = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemCollectionsGenericIEnumerable1OSICoreModelsResponsesAccountReportCategoryResponse>(
    { url: `/api/AccountReports/categories`, method: 'GET', signal },
    options
  );
};

export const getGetApiAccountReportsCategoriesQueryKey = () => {
  return [`/api/AccountReports/categories`] as const;
};

export const getGetApiAccountReportsCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAccountReportsCategories>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAccountReportsCategoriesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountReportsCategories>>> = ({ signal }) =>
    getApiAccountReportsCategories(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAccountReportsCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAccountReportsCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAccountReportsCategories>>
>;
export type GetApiAccountReportsCategoriesQueryError = ErrorType<unknown>;

export function useGetApiAccountReportsCategories<
  TData = Awaited<ReturnType<typeof getApiAccountReportsCategories>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsCategories<
  TData = Awaited<ReturnType<typeof getApiAccountReportsCategories>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>,
      'initialData'
    >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAccountReportsCategories<
  TData = Awaited<ReturnType<typeof getApiAccountReportsCategories>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
 */

export function useGetApiAccountReportsCategories<
  TData = Awaited<ReturnType<typeof getApiAccountReportsCategories>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAccountReportsCategories>>, TError, TData>>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAccountReportsCategoriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
export const postApiAccountReportsIdMonthlyFormData = (
  id: number,
  requestsAccountReportPublishRequest: BodyType<RequestsAccountReportPublishRequest>,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesAccountReportFormData>(
    {
      url: `/api/AccountReports/${id}/monthly-form-data`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestsAccountReportPublishRequest,
      signal
    },
    options
  );
};

export const getPostApiAccountReportsIdMonthlyFormDataMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountReportsIdMonthlyFormData>>,
    TError,
    { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAccountReportsIdMonthlyFormData>>,
  TError,
  { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAccountReportsIdMonthlyFormData>>,
    { id: number; data: BodyType<RequestsAccountReportPublishRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiAccountReportsIdMonthlyFormData(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAccountReportsIdMonthlyFormDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAccountReportsIdMonthlyFormData>>
>;
export type PostApiAccountReportsIdMonthlyFormDataMutationBody = BodyType<RequestsAccountReportPublishRequest>;
export type PostApiAccountReportsIdMonthlyFormDataMutationError = ErrorType<unknown>;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
export const usePostApiAccountReportsIdMonthlyFormData = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAccountReportsIdMonthlyFormData>>,
    TError,
    { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAccountReportsIdMonthlyFormData>>,
  TError,
  { id: number; data: BodyType<RequestsAccountReportPublishRequest> },
  TContext
> => {
  const mutationOptions = getPostApiAccountReportsIdMonthlyFormDataMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsResponsesAuthorizeResponse,
  ApiResponse1OSICoreModelsResponsesUserContactResponse,
  ApiResponse1SystemString,
  PostApiAuthParams
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Авторизация пользователя
 */
export const postApiAuth = (
  params?: PostApiAuthParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesAuthorizeResponse>(
    { url: `/api/Auth`, method: 'POST', params, signal },
    options
  );
};

export const getPostApiAuthMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuth>>,
    TError,
    { params?: PostApiAuthParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiAuth>>, TError, { params?: PostApiAuthParams }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuth>>, { params?: PostApiAuthParams }> = (
    props
  ) => {
    const { params } = props ?? {};

    return postApiAuth(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuth>>>;

export type PostApiAuthMutationError = ErrorType<unknown>;

/**
 * @summary Авторизация пользователя
 */
export const usePostApiAuth = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuth>>,
    TError,
    { params?: PostApiAuthParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof postApiAuth>>, TError, { params?: PostApiAuthParams }, TContext> => {
  const mutationOptions = getPostApiAuthMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Обновление токена пользователя
 */
export const postApiAuthRefresh = (
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1SystemString>(
    { url: `/api/Auth/refresh`, method: 'POST', signal },
    options
  );
};

export const getPostApiAuthRefreshMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError, void, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRefresh>>, void> = () => {
    return postApiAuthRefresh(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRefresh>>>;

export type PostApiAuthRefreshMutationError = ErrorType<unknown>;

/**
 * @summary Обновление токена пользователя
 */
export const usePostApiAuthRefresh = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError, void, TContext>;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError, void, TContext> => {
  const mutationOptions = getPostApiAuthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Проверить контактные данные
 */
export const getApiAuthCheckContactPhone = (
  phone: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesUserContactResponse>(
    { url: `/api/Auth/check-contact/${phone}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAuthCheckContactPhoneQueryKey = (phone: string) => {
  return [`/api/Auth/check-contact/${phone}`] as const;
};

export const getGetApiAuthCheckContactPhoneQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthCheckContactPhoneQueryKey(phone);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>> = ({ signal }) =>
    getApiAuthCheckContactPhone(phone, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!phone, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAuthCheckContactPhoneQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>
>;
export type GetApiAuthCheckContactPhoneQueryError = ErrorType<unknown>;

export function useGetApiAuthCheckContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthCheckContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthCheckContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Проверить контактные данные
 */

export function useGetApiAuthCheckContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckContactPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAuthCheckContactPhoneQueryOptions(phone, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Генерация 6-тизначного кода (ОТП) и отправка в телеграм/sms по данному номеру
 */
export const getApiAuthGenerateOtpPhone = (
  phone: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Auth/generate-otp/${phone}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAuthGenerateOtpPhoneQueryKey = (phone: string) => {
  return [`/api/Auth/generate-otp/${phone}`] as const;
};

export const getGetApiAuthGenerateOtpPhoneQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthGenerateOtpPhoneQueryKey(phone);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>> = ({ signal }) =>
    getApiAuthGenerateOtpPhone(phone, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!phone, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAuthGenerateOtpPhoneQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>>;
export type GetApiAuthGenerateOtpPhoneQueryError = ErrorType<unknown>;

export function useGetApiAuthGenerateOtpPhone<
  TData = Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthGenerateOtpPhone<
  TData = Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthGenerateOtpPhone<
  TData = Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Генерация 6-тизначного кода (ОТП) и отправка в телеграм/sms по данному номеру
 */

export function useGetApiAuthGenerateOtpPhone<
  TData = Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthGenerateOtpPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAuthGenerateOtpPhoneQueryOptions(phone, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Проверка 6-тизначного кода (ОТП)
 */
export const getApiAuthVerifyOtpPhoneOtp = (
  phone: string,
  otp: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsResponsesAuthorizeResponse>(
    { url: `/api/Auth/verify-otp/${phone}/${otp}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAuthVerifyOtpPhoneOtpQueryKey = (phone: string, otp: string) => {
  return [`/api/Auth/verify-otp/${phone}/${otp}`] as const;
};

export const getGetApiAuthVerifyOtpPhoneOtpQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  otp: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthVerifyOtpPhoneOtpQueryKey(phone, otp);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>> = ({ signal }) =>
    getApiAuthVerifyOtpPhoneOtp(phone, otp, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(phone && otp), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAuthVerifyOtpPhoneOtpQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>
>;
export type GetApiAuthVerifyOtpPhoneOtpQueryError = ErrorType<unknown>;

export function useGetApiAuthVerifyOtpPhoneOtp<
  TData = Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  otp: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthVerifyOtpPhoneOtp<
  TData = Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  otp: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthVerifyOtpPhoneOtp<
  TData = Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  otp: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Проверка 6-тизначного кода (ОТП)
 */

export function useGetApiAuthVerifyOtpPhoneOtp<
  TData = Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  otp: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthVerifyOtpPhoneOtp>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAuthVerifyOtpPhoneOtpQueryOptions(phone, otp, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Удалить контакт из бота
 */
export const getApiAuthClearContactPhone = (
  phone: string,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/Auth/clear-contact/${phone}`, method: 'GET', signal },
    options
  );
};

export const getGetApiAuthClearContactPhoneQueryKey = (phone: string) => {
  return [`/api/Auth/clear-contact/${phone}`] as const;
};

export const getGetApiAuthClearContactPhoneQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthClearContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAuthClearContactPhoneQueryKey(phone);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>> = ({ signal }) =>
    getApiAuthClearContactPhone(phone, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!phone, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthClearContactPhone>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiAuthClearContactPhoneQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthClearContactPhone>>
>;
export type GetApiAuthClearContactPhoneQueryError = ErrorType<unknown>;

export function useGetApiAuthClearContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthClearContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthClearContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthClearContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>,
        'initialData'
      >;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiAuthClearContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthClearContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Удалить контакт из бота
 */

export function useGetApiAuthClearContactPhone<
  TData = Awaited<ReturnType<typeof getApiAuthClearContactPhone>>,
  TError = ErrorType<unknown>
>(
  phone: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthClearContactPhone>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiAuthClearContactPhoneQueryOptions(phone, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

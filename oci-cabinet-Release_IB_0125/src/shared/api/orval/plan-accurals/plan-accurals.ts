/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OSI.Core
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import type {
  ApiResponse,
  ApiResponse1OSICoreModelsDbAct,
  ApiResponse1OSICoreModelsDbPlanAccural,
  PutApiPlanAccuralsIdCreateAccuralsParams,
  PutApiPlanAccuralsIdSetAccuralJobAtDayParams,
  PutApiPlanAccuralsIdSetUssikingIncludedParams
} from '.././models';
import { axiosForReactQueryInstance } from '../../reactQuery';
import type { ErrorType } from '../../reactQuery';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */
export const getApiPlanAccuralsId = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>,
  signal?: AbortSignal
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbPlanAccural>(
    { url: `/api/PlanAccurals/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiPlanAccuralsIdQueryKey = (id: number) => {
  return [`/api/PlanAccurals/${id}`] as const;
};

export const getGetApiPlanAccuralsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPlanAccuralsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPlanAccuralsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPlanAccuralsId>>> = ({ signal }) =>
    getApiPlanAccuralsId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPlanAccuralsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiPlanAccuralsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPlanAccuralsId>>>;
export type GetApiPlanAccuralsIdQueryError = ErrorType<unknown>;

export function useGetApiPlanAccuralsId<
  TData = Awaited<ReturnType<typeof getApiPlanAccuralsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPlanAccuralsId<
  TData = Awaited<ReturnType<typeof getApiPlanAccuralsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>, 'initialData'>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiPlanAccuralsId<
  TData = Awaited<ReturnType<typeof getApiPlanAccuralsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */

export function useGetApiPlanAccuralsId<
  TData = Awaited<ReturnType<typeof getApiPlanAccuralsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPlanAccuralsId>>, TError, TData>>;
    request?: SecondParameter<typeof axiosForReactQueryInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiPlanAccuralsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –°–¥–µ–ª–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –ø–ª–∞–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */
export const putApiPlanAccuralsIdCreateAccurals = (
  id: number,
  params?: PutApiPlanAccuralsIdCreateAccuralsParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/PlanAccurals/${id}/create-accurals`, method: 'PUT', params },
    options
  );
};

export const getPutApiPlanAccuralsIdCreateAccuralsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAccurals>>,
    TError,
    { id: number; params?: PutApiPlanAccuralsIdCreateAccuralsParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAccurals>>,
  TError,
  { id: number; params?: PutApiPlanAccuralsIdCreateAccuralsParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAccurals>>,
    { id: number; params?: PutApiPlanAccuralsIdCreateAccuralsParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiPlanAccuralsIdCreateAccurals(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPlanAccuralsIdCreateAccuralsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAccurals>>
>;

export type PutApiPlanAccuralsIdCreateAccuralsMutationError = ErrorType<unknown>;

/**
 * @summary –°–¥–µ–ª–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –ø–ª–∞–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */
export const usePutApiPlanAccuralsIdCreateAccurals = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAccurals>>,
    TError,
    { id: number; params?: PutApiPlanAccuralsIdCreateAccuralsParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAccurals>>,
  TError,
  { id: number; params?: PutApiPlanAccuralsIdCreateAccuralsParams },
  TContext
> => {
  const mutationOptions = getPutApiPlanAccuralsIdCreateAccuralsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –í–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É OSI Billing (USSIKING) –≤ —Ç–∞—Ä–∏—Ñ
 */
export const putApiPlanAccuralsIdSetUssikingIncluded = (
  id: number,
  params?: PutApiPlanAccuralsIdSetUssikingIncludedParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/PlanAccurals/${id}/set-ussiking-included`, method: 'PUT', params },
    options
  );
};

export const getPutApiPlanAccuralsIdSetUssikingIncludedMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdSetUssikingIncluded>>,
    TError,
    { id: number; params?: PutApiPlanAccuralsIdSetUssikingIncludedParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdSetUssikingIncluded>>,
  TError,
  { id: number; params?: PutApiPlanAccuralsIdSetUssikingIncludedParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdSetUssikingIncluded>>,
    { id: number; params?: PutApiPlanAccuralsIdSetUssikingIncludedParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiPlanAccuralsIdSetUssikingIncluded(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPlanAccuralsIdSetUssikingIncludedMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdSetUssikingIncluded>>
>;

export type PutApiPlanAccuralsIdSetUssikingIncludedMutationError = ErrorType<unknown>;

/**
 * @summary –í–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É OSI Billing (USSIKING) –≤ —Ç–∞—Ä–∏—Ñ
 */
export const usePutApiPlanAccuralsIdSetUssikingIncluded = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdSetUssikingIncluded>>,
    TError,
    { id: number; params?: PutApiPlanAccuralsIdSetUssikingIncludedParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdSetUssikingIncluded>>,
  TError,
  { id: number; params?: PutApiPlanAccuralsIdSetUssikingIncludedParams },
  TContext
> => {
  const mutationOptions = getPutApiPlanAccuralsIdSetUssikingIncludedMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –ø–ª–∞–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */
export const putApiPlanAccuralsIdCreateAct = (
  id: number,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse1OSICoreModelsDbAct>(
    { url: `/api/PlanAccurals/${id}/create-act`, method: 'PUT' },
    options
  );
};

export const getPutApiPlanAccuralsIdCreateActMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAct>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAct>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAct>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return putApiPlanAccuralsIdCreateAct(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPlanAccuralsIdCreateActMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAct>>
>;

export type PutApiPlanAccuralsIdCreateActMutationError = ErrorType<unknown>;

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –ø–ª–∞–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */
export const usePutApiPlanAccuralsIdCreateAct = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAct>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof putApiPlanAccuralsIdCreateAct>>, TError, { id: number }, TContext> => {
  const mutationOptions = getPutApiPlanAccuralsIdCreateActMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
 */
export const putApiPlanAccuralsIdSetAccuralJobAtDay = (
  id: number,
  params?: PutApiPlanAccuralsIdSetAccuralJobAtDayParams,
  options?: SecondParameter<typeof axiosForReactQueryInstance>
) => {
  return axiosForReactQueryInstance<ApiResponse>(
    { url: `/api/PlanAccurals/${id}/set-accural-job-at-day`, method: 'PUT', params },
    options
  );
};

export const getPutApiPlanAccuralsIdSetAccuralJobAtDayMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdSetAccuralJobAtDay>>,
    TError,
    { id: number; params?: PutApiPlanAccuralsIdSetAccuralJobAtDayParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdSetAccuralJobAtDay>>,
  TError,
  { id: number; params?: PutApiPlanAccuralsIdSetAccuralJobAtDayParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdSetAccuralJobAtDay>>,
    { id: number; params?: PutApiPlanAccuralsIdSetAccuralJobAtDayParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiPlanAccuralsIdSetAccuralJobAtDay(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPlanAccuralsIdSetAccuralJobAtDayMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdSetAccuralJobAtDay>>
>;

export type PutApiPlanAccuralsIdSetAccuralJobAtDayMutationError = ErrorType<unknown>;

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
 */
export const usePutApiPlanAccuralsIdSetAccuralJobAtDay = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlanAccuralsIdSetAccuralJobAtDay>>,
    TError,
    { id: number; params?: PutApiPlanAccuralsIdSetAccuralJobAtDayParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosForReactQueryInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiPlanAccuralsIdSetAccuralJobAtDay>>,
  TError,
  { id: number; params?: PutApiPlanAccuralsIdSetAccuralJobAtDayParams },
  TContext
> => {
  const mutationOptions = getPutApiPlanAccuralsIdSetAccuralJobAtDayMutationOptions(options);

  return useMutation(mutationOptions);
};
